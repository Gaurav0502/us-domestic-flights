# Data

## Description

The data used throughout this project deals with on-time performance of domestic flights within the United States. In the recent years, the air traffic has increased significantly and huge amounts of flight data is generated each day. Hence, the data is filtered based on the following criteria:

-   The airports of interest are those serving the New York City (NYC) region (i.e. LGA, JFK, and EWR).

-   Both in-bound and out-bound domestic flights.

-   the data is restricted to the most recent year (i.e. 2023).

The data is obtained using the `anyflights` package from [CRAN](https://cran.r-project.org/web/packages/anyflights/anyflights.pdf "anyflights package"). This package queries the data released annually by the Federal Aviation Administration (FAA) in first quarter of the following year. The FAA database is updated every year and consequently the data can be queried from any historical data up to the most recent year. The data is obtained as five different data frames as follows:

-   `flights`: it provides all the daily flight on-time performance data. It includes the origin airport, scheduled departure time, destination airport, scheduled arrival time, carrier, tail number of the aircraft, arrival delay, and departure delay. It has 863228 rows and 19 columns.

-   `weather`: it provides hourly weather parameters for origin airport. These parameters include visibility, wind speed, pressure, precipitation, and humidity. It has 976340 rows and 15 columns.

-   `planes`: it provides the production information of an aircraft. It includes the tail number of the aircraft, year of manufacture, manufacturer, and the type of engine. It has 4848 rows and 10 columns.

-   `airports`: it provides the metadata for the airport. The metadata includes the FAA code, its name, time zone, latitude, longitude, and altitude. It has 1251 rows and 8 columns.

-   `airlines`: it provides the metadata for the airlines which is the IATA code of the carrier and its name. It has 14 rows and 2 columns.

All the data frames are related to each other. Hence, the data has a relation structure. Every row in each of the data frames can be identified by a primary key (PK) and the `flights` data frame can related to each of the other four data frames with the help of foreign keys (FK). Figure 1 shows the relational schema of the data. For example, every entry in the `flights` data frame can be uniquely identified by (`year`, `month`, `day`, `hour`, and `flight`) and it can be joined with the `weather` data frame based on (`origin`, `year`, `month`, `day`, and `hour`)

![Fig. 1: The relational schema for the data obtained using the anyflights package in R where PK = Primary Key, FK = Foreign Key, ... = more columns exist.](data-schema.png)

The next section describes the data preparation process.

## Data preparation

The data used is not readily available online as CSV files. Hence, the data needs to be collected, filtered, consolidated, and saved for future use.

### Data collection

The data collection includes two key steps:

-   Collection of data for out-bound flights from airports that serve NYC region.

-   Collection of data for in-bound flights from airports that serve NYC region.

To use the `anyflights` package it first needs to be installed using `install.packages("anyflights")` .

```{r}

library(anyflights)
library(dplyr)

```

The `anyflights` package has an `anyflights()` which queries the FAA database. It fetches all the five aforementioned data frames and therefore it can take a lot of time to obtain the data based on the network connectivity. In order to avoid changes of an API timeout, the default value of 60 seconds is updated with a high value of 1500 seconds stored in the `API_REQ_TIMEOUT`. All the previously stated constraints are stored in the `STATIONS` and `YEAR` constants. `save_data()` is a utility function to save the collected data into the required directory location.

```{r}

# constants
API_REQ_TIMEOUT = 1500
STATIONS = c("LGA", "JFK", "EWR")
YEAR = 2023
DATA_DIR = "data"

# Utility function
save_data <- function(data, flight_type){
 
  tables <- c("flights", "planes", "airlines", "airports", "weather")
  csv_path <- ""
  
  for(table_name in tables){
     
    if(!any(table_name %in% c("airlines", "airports"))){
      
      csv_path = file.path(DATA_DIR, "raw", flight_type, 
                           paste(table_name, "csv",
                                 sep = "."))
    }else{
      csv_path = file.path(DATA_DIR, "raw", 
                           paste(table_name, "csv",
                                 sep = "."))
    }
    
    if(!file.exists(csv_path)){
      
      write.csv(x = data[table_name],
              file = csv_path)
      
      cat("Saved", paste(table_name, "csv",
                         sep = "."), "at",
          csv_path, "\n")
       
    }
    
  }

}
```

#### Outbound flights

For this use-case, an outbound flight is one that departs from one of airports that serve the NYC region and arrives at any other airport within the United States. Therefore, the departure airports denoted by the `station` argument is given the NYC airports and the `year` as 2023.

```{r}

# options(timeout = API_REQ_TIMEOUT)
# 
# nycflights23outbound <- anyflights::anyflights(station = STATIONS,
#                                                year = YEAR)
# 
# save_data(data = nycflights23outbound,
#           flight_type = "outbound")

```

#### Inbound flights

For this use-case, an inbound flight is one that departs from any other airport within the United States (except the airports that serve the NYC region) and arrives at one of airports that serve the NYC region.

The departure airports are computed based on the distinct destination airports in `flights` data frame of `nycflights23outbound` . It happens to be that there are some airports for which the data cannot be fetched. Hence, the destination airports are filtered based on whether their FAA code appears in the `faa` column of `airports` data frame.

All the outbound flights are obtained for the computed list of airports. However, the `flights` data frame of `nycflights23inbound` consists of flights that depart and arrive at any airport within the United States. Therefore, all flights that do not arrive in the airports that serve NYC are filtered out based on the `dest` column of `flights` data frame.

```{r}

# all_airports <- nycflights23outbound$airports$faa
# 
# dest_airports <- nycflights23outbound$flights |> 
#                     filter(dest %in% all_airports & !dest %in% STATIONS) |>
#                        select("dest") |>
#                           unique()
# 
# dest_airports <- dest_airports$dest

# nycflights23inbound <- anyflights::anyflights(station = dest_airports,
#                                               year = YEAR)

# nycflights23inbound$flights <- nycflights23inbound$flights |>
#                                   filter(dest %in% STATIONS)
# 
# save_data(data = nycflights23inbound,
#           flight_type = "inbound")

```

### Data consolidation

#### Flights data

```{r}

# nycflights23 <- rbind(nycflights23inbound$flights, 
#                       nycflights23outbound$flights)
# 
# nycflights23 <- nycflights23 |>
#                   arrange(year, month, day, hour, flight)
# 
# write.csv(x = nycflights23,
#           file = "data/raw/flights.csv")

```

#### Weather

```{r}

# weather <- rbind(nycflights23inbound$weather, 
#                  nycflights23outbound$weather)
# 
# weather <- weather |>
#              arrange(origin, year, month, day, hour)
# 
# write.csv(x = weather,
#           file = "data/raw/weather.csv")

```

#### Planes

```{r}

# tailnum <- unique(nycflights23$tailnum)
# 
# planes_inbound <- 
#   planes_inbound |> 
#     filter(planes_inbound$planes.tailnum %in% tailnum)
# 
# planes_outbound <- 
#    planes_outbound |>
#      filter(!planes_outbound$planes.tailnum %in% planes_inbound$planes.tailnum)
# 
# planes <- rbind(planes_inbound, planes_outbound)
# 
# write.csv(x = planes,
#           file = "data/raw/planes.csv")
```

## Missing value analysis
