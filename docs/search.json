[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of NYC domestic flights in 2023",
    "section": "",
    "text": "1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThe data used throughout this project deals with on-time performance of domestic flights within the United States. In the recent years, the air traffic has increased significantly and huge amounts of flight data is generated each day. Hence, the data is filtered based on the following criteria:\nThe data is obtained using the anyflights package from CRAN. This package queries the data released annually by the Federal Aviation Administration (FAA) in first quarter of the following year. The FAA database is updated every year and consequently the data can be queried from any historical data up to the most recent year. The data is obtained as five different data frames as follows:\nAll the data frames are related to each other. Hence, the data has a relation structure. Every row in each of the data frames can be identified by a primary key (PK) and the flights data frame can related to each of the other four data frames with the help of foreign keys (FK). Figure 1 shows the relational schema of the data. For example, every entry in the flights data frame can be uniquely identified by (year, month, day, hour, and flight) and it can be joined with the weather data frame based on (origin, year, month, day, and hour)\nThe next section describes the data preparation process.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "The airports of interest are those serving the New York City (NYC) region (i.e. LGA, JFK, and EWR).\nBoth in-bound and out-bound domestic flights.\nthe data is restricted to the most recent year (i.e. 2023).\n\n\n\nflights: it provides all the daily flight on-time performance data. It includes the origin airport, scheduled departure time, destination airport, scheduled arrival time, carrier, tail number of the aircraft, arrival delay, and departure delay. It has 863228 rows and 19 columns.\nweather: it provides hourly weather parameters for origin airport. These parameters include visibility, wind speed, pressure, precipitation, and humidity. It has 976340 rows and 15 columns.\nplanes: it provides the production information of an aircraft. It includes the tail number of the aircraft, year of manufacture, manufacturer, and the type of engine. It has 4848 rows and 10 columns.\nairports: it provides the metadata for the airport. The metadata includes the FAA code, its name, time zone, latitude, longitude, and altitude. It has 1251 rows and 8 columns.\nairlines: it provides the metadata for the airlines which is the IATA code of the carrier and its name. It has 14 rows and 2 columns.\n\n\n\n\n\nFig. 1: The relational schema for the data obtained using the anyflights package in R where PK = Primary Key, FK = Foreign Key, … = more columns exist.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-preparation",
    "href": "data.html#data-preparation",
    "title": "2  Data",
    "section": "2.2 Data preparation",
    "text": "2.2 Data preparation\nThe data used is not readily available online as CSV files. Hence, the data needs to be collected, filtered, consolidated, and saved for future use.\n\n2.2.1 Data collection\nThe data collection includes two key steps:\n\nCollection of data for out-bound flights from airports that serve NYC region.\nCollection of data for in-bound flights from airports that serve NYC region.\n\nTo use the anyflights package it first needs to be installed using install.packages(\"anyflights\") .\n\n\nCode\nlibrary(anyflights)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nThe anyflights package has an anyflights() which queries the FAA database. It fetches all the five aforementioned data frames and therefore it can take a lot of time to obtain the data based on the network connectivity. In order to avoid changes of an API timeout, the default value of 60 seconds is updated with a high value of 1500 seconds stored in the API_REQ_TIMEOUT. All the previously stated constraints are stored in the STATIONS and YEAR constants. save_data() is a utility function to save the collected data into the required directory location.\n\n\nCode\n# constants\nAPI_REQ_TIMEOUT = 1500\nSTATIONS = c(\"LGA\", \"JFK\", \"EWR\")\nYEAR = 2023\nDATA_DIR = \"data\"\n\n# Utility function\nsave_data &lt;- function(data, flight_type){\n \n  tables &lt;- c(\"flights\", \"planes\", \"airlines\", \"airports\", \"weather\")\n  csv_path &lt;- \"\"\n  \n  for(table_name in tables){\n     \n    if(!any(table_name %in% c(\"airlines\", \"airports\"))){\n      \n      csv_path = file.path(DATA_DIR, \"raw\", flight_type, \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }else{\n      csv_path = file.path(DATA_DIR, \"raw\", \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }\n    \n    if(!file.exists(csv_path)){\n      \n      write.csv(x = data[table_name],\n              file = csv_path)\n      \n      cat(\"Saved\", paste(table_name, \"csv\",\n                         sep = \".\"), \"at\",\n          csv_path, \"\\n\")\n       \n    }\n    \n  }\n\n}\n\n\n\n2.2.1.1 Outbound flights\nFor this use-case, an outbound flight is one that departs from one of airports that serve the NYC region and arrives at any other airport within the United States. Therefore, the departure airports denoted by the station argument is given the NYC airports and the year as 2023.\n\n\nCode\n# options(timeout = API_REQ_TIMEOUT)\n# \n# nycflights23outbound &lt;- anyflights::anyflights(station = STATIONS,\n#                                                year = YEAR)\n# \n# save_data(data = nycflights23outbound,\n#           flight_type = \"outbound\")\n\n\n\n\n2.2.1.2 Inbound flights\nFor this use-case, an inbound flight is one that departs from any other airport within the United States (except the airports that serve the NYC region) and arrives at one of airports that serve the NYC region.\nThe departure airports are computed based on the distinct destination airports in flights data frame of nycflights23outbound . It happens to be that there are some airports for which the data cannot be fetched. Hence, the destination airports are filtered based on whether their FAA code appears in the faa column of airports data frame.\nAll the outbound flights are obtained for the computed list of airports. However, the flights data frame of nycflights23inbound consists of flights that depart and arrive at any airport within the United States. Therefore, all flights that do not arrive in the airports that serve NYC are filtered out based on the dest column of flights data frame.\n\n\nCode\n# all_airports &lt;- nycflights23outbound$airports$faa\n# \n# dest_airports &lt;- nycflights23outbound$flights |&gt; \n#                     filter(dest %in% all_airports & !dest %in% STATIONS) |&gt;\n#                        select(\"dest\") |&gt;\n#                           unique()\n# \n# dest_airports &lt;- dest_airports$dest\n\n# nycflights23inbound &lt;- anyflights::anyflights(station = dest_airports,\n#                                               year = YEAR)\n\n# nycflights23inbound$flights &lt;- nycflights23inbound$flights |&gt;\n#                                   filter(dest %in% STATIONS)\n# \n# save_data(data = nycflights23inbound,\n#           flight_type = \"inbound\")\n\n\n\n\n\n2.2.2 Data consolidation\n\n2.2.2.1 Flights data\n\n\nCode\n# nycflights23 &lt;- rbind(nycflights23inbound$flights, \n#                       nycflights23outbound$flights)\n# \n# nycflights23 &lt;- nycflights23 |&gt;\n#                   arrange(year, month, day, hour, flight)\n# \n# write.csv(x = nycflights23,\n#           file = \"data/raw/flights.csv\")\n\n\n\n\n2.2.2.2 Weather\n\n\nCode\n# weather &lt;- rbind(nycflights23inbound$weather, \n#                  nycflights23outbound$weather)\n# \n# weather &lt;- weather |&gt;\n#              arrange(origin, year, month, day, hour)\n# \n# write.csv(x = weather,\n#           file = \"data/raw/weather.csv\")\n\n\n\n\n2.2.2.3 Planes\n\n\nCode\n# tailnum &lt;- unique(nycflights23$tailnum)\n# \n# planes_inbound &lt;- \n#   planes_inbound |&gt; \n#     filter(planes_inbound$planes.tailnum %in% tailnum)\n# \n# planes_outbound &lt;- \n#    planes_outbound |&gt;\n#      filter(!planes_outbound$planes.tailnum %in% planes_inbound$planes.tailnum)\n# \n# planes &lt;- rbind(planes_inbound, planes_outbound)\n# \n# write.csv(x = planes,\n#           file = \"data/raw/planes.csv\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing value analysis",
    "text": "2.3 Missing value analysis",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  }
]