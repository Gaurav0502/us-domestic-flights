[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of NYC domestic flights in 2023",
    "section": "",
    "text": "1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThe data used throughout this project deals with on-time performance of domestic flights within the United States. In the recent years, the air traffic has increased significantly and huge amounts of flight data is being generated each day. Hence, the data is filtered based on the following criteria:\nThe data is obtained using the anyflights package from CRAN. This package queries the data released annually by the Federal Aviation Administration (FAA). The data for a particular year is released in the first quarter of the following year. The FAA database is updated every year and consequently the data can be queried from any historical data up to the most recent year. The data is obtained as five different data frames as follows:\nAll the data frames are related to each other. Hence, the data has a relational structure. Every row in each of the data frames can be identified by a primary key (PK) and the flights data frame can related to each of the other four data frames with the help of foreign keys (FK). Figure 1 shows the relational schema of the data. For example, every entry in the flights data frame can be uniquely identified by (year, month, day, hour, and flight) and it can be joined with the weather data frame based on (origin, year, month, day, and hour)\nThe data used is not readily available online as CSV files. Hence, the data needs to be collected, filtered, consolidated, and saved for future use.\nThe next section describes the data preparation process.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "The airports of interest are those serving the New York City (NYC) region (i.e. LGA, JFK, and EWR).\nBoth in-bound and out-bound domestic flights.\nthe data is restricted to the most recent year (i.e. 2023).\n\n\n\nflights: it provides all the daily flight on-time performance data. It includes the origin airport, scheduled departure time, destination airport, scheduled arrival time, carrier, tail number of the aircraft, arrival delay, and departure delay. It has 863228 rows and 19 columns.\nweather: it provides hourly weather parameters for origin airport. These parameters include visibility, wind speed, pressure, precipitation, and humidity. It has 976340 rows and 15 columns.\nplanes: it provides the production information of an aircraft. It includes the tail number of the aircraft, year of manufacture, manufacturer, and the type of engine. It has 4848 rows and 10 columns.\nairports: it provides the metadata for the airport. The metadata includes the FAA code, its name, time zone, latitude, longitude, and altitude. It has 1251 rows and 8 columns.\nairlines: it provides the metadata for the airlines which is the IATA code of the carrier and its name. It has 14 rows and 2 columns.\n\n\n\n\n\nFig. 1: The relational schema for the data obtained using the anyflights package in R where PK = Primary Key, FK = Foreign Key, … = more columns exist.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-collection",
    "href": "data.html#data-collection",
    "title": "2  Data",
    "section": "2.2 Data collection",
    "text": "2.2 Data collection\nThe data collection includes two key steps:\n\nCollection of data for out-bound flights from airports that serve NYC region.\nCollection of data for in-bound flights from airports that serve NYC region.\n\nTo use the anyflights package it first needs to be installed using install.packages(\"anyflights\") .\n\n\nCode\nlibrary(anyflights)\nlibrary(dplyr)\n\n\nThe anyflights package has a anyflights() function which queries the FAA database. It fetches all the five aforementioned data frames and therefore it can take a lot of time to obtain the data contingent upon the network connectivity. In order to avoid chances of an API timeout, the default value of 60 seconds is updated with a high value of 1500 seconds stored in the API_REQ_TIMEOUT. All the previously stated constraints are stored in the STATIONS and YEAR constants. save_data() is a utility function to save the collected data into the required directory location.\n\n\nCode\n# constants\nAPI_REQ_TIMEOUT = 1500\nSTATIONS = c(\"LGA\", \"JFK\", \"EWR\")\nYEAR = 2023\nDATA_DIR = \"data\"\n\n# Utility function\nsave_data &lt;- function(data, flight_type){\n \n  tables &lt;- c(\"flights\", \"planes\", \"airlines\", \"airports\", \"weather\")\n  csv_path &lt;- \"\"\n  \n  for(table_name in tables){\n     \n    if(!any(table_name %in% c(\"airlines\", \"airports\"))){\n      \n      csv_path = file.path(DATA_DIR, \"raw\", flight_type, \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }else{\n      csv_path = file.path(DATA_DIR, \"raw\", \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }\n    \n    if(!file.exists(csv_path)){\n      \n      write.csv(x = data[table_name],\n              file = csv_path)\n      \n      cat(\"Saved\", paste(table_name, \"csv\",\n                         sep = \".\"), \"at\",\n          csv_path, \"\\n\")\n       \n    }\n    \n  }\n\n}\n\n\n\n2.2.1 Outbound flights\nFor this use-case, an outbound flight is one that departs from one of airports that serve the NYC region and arrives at any other airport within the United States. Therefore, the departure airports denoted by the station argument is given the NYC airports and the year as 2023.\n\n\nCode\noptions(timeout = API_REQ_TIMEOUT)\n\nnycflights23outbound &lt;- anyflights::anyflights(station = STATIONS,\n                                               year = YEAR)\n\nsave_data(data = nycflights23outbound,\n          flight_type = \"outbound\")\n\n\n\n\n2.2.2 Inbound flights\nFor this use-case, an inbound flight is one that departs from any other airport within the United States (except the airports that serve the NYC region) and arrives at one of airports that serve the NYC region.\nThe departure airports are computed based on the distinct destination airports in flights data frame of nycflights23outbound . It happens to be that there are some airports for which the data cannot be fetched. Hence, the destination airports are filtered based on whether their FAA code appears in the faa column of airports data frame.\nAll the outbound flights are obtained for the computed list of airports. However, the flights data frame of nycflights23inbound consists of flights that depart and arrive at any airport within the United States. Therefore, all flights that do not arrive in the airports that serve NYC are filtered out based on the dest column of flights data frame.\n\n\nCode\nall_airports &lt;- nycflights23outbound$airports$faa\n\ndest_airports &lt;- nycflights23outbound$flights |&gt;\n                     filter(dest %in% all_airports & !dest %in% STATIONS) |&gt;\n                        select(\"dest\") |&gt;\n                           unique()\n\ndest_airports &lt;- dest_airports$dest\n\nnycflights23inbound &lt;- anyflights::anyflights(station = dest_airports,\n                                               year = YEAR)\n\nnycflights23inbound$flights &lt;- nycflights23inbound$flights |&gt;\n                                   filter(dest %in% STATIONS)\n\nsave_data(data = nycflights23inbound,\n          flight_type = \"inbound\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-consolidation",
    "href": "data.html#data-consolidation",
    "title": "2  Data",
    "section": "2.3 Data consolidation",
    "text": "2.3 Data consolidation\nIn the previous section, the data is collected into two different list: nycflights23inbound and nycflights23outbound . Each of these lists contain five data frames: flights, weather, planes, airports, and airlines. The airports and airlines data frames remain the same for inbound and outbound flights. The data for the flights, weather, and planes must be combined respectively.\n\n2.3.1 Flights data\nAll the rows in the inbound and outbound flights data frames are combined into a single data frame using rbind() powered by the dplyr package. The combined flights data is sorted based on the primary key of the flights table.\n\n\nCode\nnycflights23 &lt;- rbind(nycflights23inbound$flights,\n                      nycflights23outbound$flights)\n\nnycflights23 &lt;- nycflights23 |&gt;\n                  arrange(year, month, day, hour, flight)\n\nwrite.csv(x = nycflights23,\n          file = \"data/raw/flights.csv\")\n\n\n\n\n2.3.2 Weather\nThe weather data frame consists of the hourly weather parameters of the airport. The inbound and outbound weather data frames contain data for different set of airports. Therefore, both of them need to be joined in a similar way as that of flights data.\n\n\nCode\nweather &lt;- rbind(nycflights23inbound$weather,\n                 nycflights23outbound$weather)\n\nweather &lt;- weather |&gt;\n             arrange(origin, year, month, day, hour)\n\nwrite.csv(x = weather,\n          file = \"data/raw/weather.csv\")\n\n\n\n\n2.3.3 Planes\nThe planes data frame stored the production details for each aircraft based on its tailnum. Generally, the plane that operates the inbound flight also operates the outbound flight. However, since the NYC airports are hubs for a majority of US carriers, there is a possibility that an aircraft is changed for the onward flight.\nTherefore, all the planes operating the inbound flights is considered and all planes for outbound flights that are not in set of planes that operated in the inbound flights are considered. At the end, the data is consolidate to get production details of all the aircraft operating on the routes in the flights data frame.\n\n\nCode\ntailnum &lt;- unique(nycflights23$tailnum)\n\nplanes_inbound &lt;-\n  planes_inbound |&gt;\n    filter(planes_inbound$planes.tailnum %in% tailnum)\n\nplanes_outbound &lt;-\n   planes_outbound |&gt;\n     filter(!planes_outbound$planes.tailnum %in% planes_inbound$planes.tailnum)\n\nplanes &lt;- rbind(planes_inbound, planes_outbound)\n\nwrite.csv(x = planes,\n          file = \"data/raw/planes.csv\")\n\n\nFinally, all the data is stored in /data directory under the /raw sub-directory since no data cleaning has been performed on it yet. The /raw sub-directory contains the .csv files for consolidated data and has two further sub-directories /inbound and /outbound with the respective .csv files.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.4 Missing value analysis",
    "text": "2.4 Missing value analysis",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Loading the datasets\nCode\nflights &lt;- read.csv(\"data/raw/flights.csv\")\nairlines &lt;- read.csv(\"data/raw/airlines.csv\")\nairports &lt;- read.csv(\"data/raw/airports.csv\")\nweather &lt;- read.csv(\"data/raw/weather.csv\")\nplanes &lt;- read.csv(\"data/raw/planes.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#loading-the-required-modules",
    "href": "results.html#loading-the-required-modules",
    "title": "3  Results",
    "section": "3.2 Loading the required modules",
    "text": "3.2 Loading the required modules\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(forcats)\n\nNYC_AIRPORTS = c(\"LGA\", \"JFK\", \"EWR\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#on-time-performance",
    "href": "results.html#on-time-performance",
    "title": "3  Results",
    "section": "3.3 On-time performance",
    "text": "3.3 On-time performance\nOn-time performance is defined as the percentage of flights that departed or arrived on-time. As per the rules of Federal Aviation Administration (FAA), a flight is consider to be delayed only if it arrives or departed after 15 minutes of the scheduled time. In the plots below, the on-time performance is depicted separately for a perfect on-time or early arrival or departure using green color and the on-time performance within a buffer period of 15 minutes using yellow color.\n\n3.3.1 By the airport (RQ1)\n\n\nCode\ninbound &lt;- flights |&gt; filter(!origin %in% NYC_AIRPORTS)\noutbound &lt;- flights |&gt; filter(origin %in% NYC_AIRPORTS)\n\ninbound_otp &lt;- inbound |&gt; drop_na() |&gt;\n  group_by(dest) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(arr_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(arr_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"inbound\")\n\noutbound_otp &lt;- outbound |&gt; drop_na() |&gt; \n  group_by(origin) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(dep_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(dep_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"outbound\")\n\notp &lt;- rbind(inbound_otp |&gt; rename(airport = dest), \n             outbound_otp |&gt; rename(airport = origin))\n\n\n\n\nCode\notp |&gt; select(airport, otp_increase, strict_otp, flight_type) |&gt; \n  pivot_longer(!c(airport, flight_type), \n               names_to = \"otp_type\", \n               values_to = \"otp\") |&gt;  \n  ggplot(aes(x = flight_type, y = otp, fill = otp_type)) + \n  geom_col() + facet_wrap(~airport) +\n  scale_fill_manual(values = c(\"#ffc300\", \"#32de84\"),\n                    name = \"delay criteria\", \n                    labels = c(\"&lt;= 15 minutes\", \"&lt;= 0 minutes\")) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"On-time performance for the airports serving NYC (2023)\",\n    x = \"Type of Flight\",\n    y = \"On-time performance (in %)\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe inbound and outbound flights at JFK and LGA had almost the same on-time performance.\nHowever, at EWR, the inbound flights had slightly better on-time performance than outbound flights.\n\n\n\n3.3.2 By the airline (RQ2)\n\n\nCode\ninbound &lt;- flights |&gt; filter(!origin %in% NYC_AIRPORTS)\noutbound &lt;- flights |&gt; filter(origin %in% NYC_AIRPORTS)\n\ninbound_otp &lt;- inbound |&gt; drop_na() |&gt; \n  group_by(dest, carrier) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(arr_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(arr_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"inbound\")\n\n\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\nCode\noutbound_otp &lt;- outbound |&gt; drop_na() |&gt; \n  group_by(origin, carrier) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(dep_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(dep_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"outbound\")\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\notp &lt;- rbind(inbound_otp |&gt; rename(airport = dest), \n             outbound_otp |&gt; rename(airport = origin))\n\n\n\n\nCode\notp |&gt; select(carrier, airport, otp_increase, strict_otp, flight_type) |&gt; \n  pivot_longer(!c(carrier, airport, flight_type), \n               names_to = \"otp_type\", values_to = \"otp\") |&gt;  \n  ggplot(aes(x = carrier, y = otp, fill = otp_type)) + \n  geom_col() + facet_grid(flight_type ~ airport,\n                          scales=\"free\",\n                          space = \"free\") +\n  scale_fill_manual(values = c(\"#ffc300\", \"#32de84\"),\n                    name = \"delay criteria\", \n                    labels = c(\"&lt;= 15 minutes\", \n                               \"&lt;= 0 minutes\")) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"On-time performance for the airlines serving NYC region (2023)\",\n    x = \"Airline Code\",\n    y = \"On-time performance (in %)\"\n  )\n\n\n\n\n\n\n\n\n\n\nAllegiant Air (G4) had the best on-time performance at EWR (also among all the three airports). However, it had the least market share implying that it operated fewer domestic flights but had a very good on-time performance for them.\nUnited Airlines (UA) and Republic Airlines (YX) have a large market share at EWR and also have a commendable on-time performance for that operational scale.\nJetBlue (B6) has the highest market share at JFK but has a relatively weaker on-time performance especially for outbound flights.\nHawaiian Airlines (HA) operates very few domestic flights to JFK but had a very weak on-time performance. Moreover, it turns out that many of their flights arrived within the 15 minute buffer period.\nFrontier Airlines (F9) had the worst on-time performance for outbound flights among all airlines.\n\n\n\nCode\nairlines &lt;- c(\"DL\", \"AA\", \"UA\", \"WN\", \"B6\", \"YX\", \"9E\")\ninbound$carrier &lt;- ifelse(inbound$carrier %in% airlines, \n                                    inbound$carrier, \"Other\")\n\noutbound$carrier &lt;- ifelse(outbound$carrier %in% airlines, \n                                   outbound$carrier, \"Other\")\n\ninbound_mkt &lt;- inbound |&gt; select(carrier, dest) |&gt; \n  group_by(dest, carrier) |&gt;\n     summarise(num_flights = n())\n\n\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\nCode\noutbound_mkt &lt;- outbound |&gt; select(carrier, origin) |&gt; \n  group_by(origin, carrier) |&gt;\n     summarise(num_flights = n())\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\nairport_mkt_share &lt;- \n  inner_join(rename(inbound_mkt, airport = dest), \n                    rename(outbound_mkt, airport = origin), \n                    by = c(\"carrier\", \"airport\")) |&gt; \n                      mutate(total_flights = num_flights.x + num_flights.y,\n                             mkt_share = total_flights/sum(total_flights)*100.0,\n                             mkt_share = round(mkt_share))\n\n\n\n\nCode\nfill_color = c(\"DL\" = \"#EE7663\", \"AA\" = \"#A0BEF5\", \"WN\" = \"lightgreen\",\n               \"UA\" = \"cornflowerblue\", \"B6\" = \"gold\", \"Other\" = \"#91AFB3\",\n               \"YX\" = \"#85decb\", \"9E\" = \"#d959c6\")\n\nairport_mkt_share |&gt; ggplot(aes(x = airport, \n                            y = mkt_share/100, fill = fct_reorder(carrier, \n                                                                  mkt_share))) +\n                     geom_col(position = \"stack\", width = 0.3) +\n                     geom_text(aes(label = mkt_share), \n                               position = position_stack(vjust = .5),\n                               size = 3.5) +\n                     scale_fill_manual(values = fill_color,\n                                       name = \"carrier\") +\n                     scale_y_continuous(labels = scales::percent) +\n                     labs(title = \"Marketshare of Carrier by Airport (2023)\", \n                          x = \"Airport\", \n                          y = \"Market Share (in %)\") + \n                     coord_flip() +\n                     theme_minimal()\n\n\n\n\n\n\n\n\n\n\nThe domestic market share at LGA was dominated by Delta Airlines (DL) and American Airlines (AA). This is because Endeavor Airlines (9E) is a subsidiary of Delta Airlines and Republic Airlines (YX) operates under contract for Delta, American, and United.\nThe domestic market share at JFK was dominated by JetBlue Airlines (B6) and Delta Airlines (DL).\nUnited Airlines (UA) dominated more than half of the domestic market share at EWR.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]