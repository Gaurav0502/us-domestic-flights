[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of NYC domestic flights in 2023",
    "section": "",
    "text": "1 Introduction\nAir travel has become a cornerstone of modern transportation, facilitating the movement of millions of passengers and goods daily across the globe. With this surge in air traffic, an immense volume of data is generated, offering valuable insights into various aspects of aviation performance. One critical metric is the on-time performance of flights, which measures how frequently flights adhere to their scheduled departure and arrival times. Flight delays, caused by factors such as weather, air traffic congestion, or operational inefficiencies, have far-reaching consequences, including increased costs for airlines, reduced customer satisfaction, and logistical challenges. Understanding and improving on-time performance is vital for enhancing passenger experience, optimizing airline operations, and ensuring the overall reliability of air travel.\nThis project delves into the on-time performance of domestic flights serving the New York City (NYC) region in 2023. Through detailed analysis, it explores the reasons behind delays and identifies patterns in their occurrence. Time-series analysis tracks delays over time, uncovering patterns such as peak-hour congestion, seasonal disruptions, or anomalies during specific events. This helps in identifying trends and improving future planning. Meanwhile, geospatial analysis maps delay patterns across locations, highlighting issues like weather-prone regions or congestion at specific airports. By combining these approaches, this project provides a comprehensive understanding of delays, enabling targeted solutions to improve air travel efficiency.\nThe aim of the project is to answer 9 research questions (RQ) as follows:\n\nHow is the on-time performance of the 3 NYC airports (EWR, JFK & LGA) for inbound and outbound flights?\nHow is the on-time performance of all the airlines having inbound and outbound flights at the 3 airports?\nWhat is the percentage of the different delay ranges for the inbound and outbound flights of the 3 airports?\nHow is the cascading effect of departure delays on arrival delays?\nWhat are the different factors that affect the arrival delay? How do they impact the arrival delay?\nDoes the actual hourly air traffic (changes due to delays) differ from the scheduled hourly air traffic for the four quarters?\nAre there any monthly or seasonal trends in the delays throughout the year?\nIs there any geographical pattern in the delay for inbound and outbound flights for the three airports?\nHow is the delay distributed on the top-10 busiest routes for the most popular US airlines?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThe data used throughout this project deals with on-time performance of domestic flights within the United States. In the recent years, the air traffic has increased significantly and huge amounts of flight data is being generated each day. Hence, the data is filtered based on the following criteria:\nThe data is obtained using the anyflights package from CRAN. This package queries the data released annually by the Federal Aviation Administration (FAA). The data for a particular year is released in the first quarter of the following year. The FAA database is updated every year and consequently the data can be queried from any historical data up to the most recent year. The data is obtained as five different data frames as follows:\nAll the data frames are related to each other. Hence, the data has a relational structure. Every row in each of the data frames can be identified by a primary key (PK) and the flights data frame can related to each of the other four data frames with the help of foreign keys (FK). Figure 1 shows the relational schema of the data. For example, every entry in the flights data frame can be uniquely identified by (year, month, day, hour, and flight) and it can be joined with the weather data frame based on (origin, year, month, day, and hour)\nThe data used is not readily available online as CSV files. Hence, the data needs to be collected, filtered, consolidated, and saved for future use.\nThe next section describes the data preparation process.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "The airports of interest are those serving the New York City (NYC) region (i.e. LGA, JFK, and EWR).\nBoth in-bound and out-bound domestic flights.\nthe data is restricted to the most recent year (i.e. 2023).\n\n\n\nflights: it provides all the daily flight on-time performance data. It includes the origin airport, scheduled departure time, destination airport, scheduled arrival time, carrier, tail number of the aircraft, arrival delay, and departure delay. It has 863228 rows and 19 columns.\nweather: it provides hourly weather parameters for origin airport. These parameters include visibility, wind speed, pressure, precipitation, and humidity. It has 976340 rows and 15 columns.\nplanes: it provides the production information of an aircraft. It includes the tail number of the aircraft, year of manufacture, manufacturer, and the type of engine. It has 4848 rows and 10 columns.\nairports: it provides the metadata for the airport. The metadata includes the FAA code, its name, time zone, latitude, longitude, and altitude. It has 1251 rows and 8 columns.\nairlines: it provides the metadata for the airlines which is the IATA code of the carrier and its name. It has 14 rows and 2 columns.\n\n\n\n\n\nFig. 1: The relational schema for the data obtained using the anyflights package in R where PK = Primary Key, FK = Foreign Key, … = more columns exist.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-collection",
    "href": "data.html#data-collection",
    "title": "2  Data",
    "section": "2.2 Data collection",
    "text": "2.2 Data collection\nThe data collection includes two key steps:\n\nCollection of data for out-bound flights from airports that serve NYC region.\nCollection of data for in-bound flights from airports that serve NYC region.\n\nTo use the anyflights package it first needs to be installed using install.packages(\"anyflights\") .\n\n\nCode\nlibrary(anyflights)\nlibrary(dplyr)\n\n\nThe anyflights package has a anyflights() function which queries the FAA database. It fetches all the five aforementioned data frames and therefore it can take a lot of time to obtain the data contingent upon the network connectivity. In order to avoid chances of an API timeout, the default value of 60 seconds is updated with a high value of 1500 seconds stored in the API_REQ_TIMEOUT. All the previously stated constraints are stored in the STATIONS and YEAR constants. save_data() is a utility function to save the collected data into the required directory location.\n\n\nCode\n# constants\nAPI_REQ_TIMEOUT = 1500\nSTATIONS = c(\"LGA\", \"JFK\", \"EWR\")\nYEAR = 2023\nDATA_DIR = \"data\"\n\n# Utility function\nsave_data &lt;- function(data, flight_type){\n \n  tables &lt;- c(\"flights\", \"planes\", \"airlines\", \"airports\", \"weather\")\n  csv_path &lt;- \"\"\n  \n  for(table_name in tables){\n     \n    if(!any(table_name %in% c(\"airlines\", \"airports\"))){\n      \n      csv_path = file.path(DATA_DIR, \"raw\", flight_type, \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }else{\n      csv_path = file.path(DATA_DIR, \"raw\", \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }\n    \n    if(!file.exists(csv_path)){\n      \n      write.csv(x = data[table_name],\n              file = csv_path)\n      \n      cat(\"Saved\", paste(table_name, \"csv\",\n                         sep = \".\"), \"at\",\n          csv_path, \"\\n\")\n       \n    }\n    \n  }\n\n}\n\n\n\n2.2.1 Outbound flights\nFor this use-case, an outbound flight is one that departs from one of airports that serve the NYC region and arrives at any other airport within the United States. Therefore, the departure airports denoted by the station argument is given the NYC airports and the year as 2023.\n\n\nCode\noptions(timeout = API_REQ_TIMEOUT)\n\nnycflights23outbound &lt;- anyflights::anyflights(station = STATIONS,\n                                               year = YEAR)\n\nsave_data(data = nycflights23outbound,\n          flight_type = \"outbound\")\n\n\n\n\n2.2.2 Inbound flights\nFor this use-case, an inbound flight is one that departs from any other airport within the United States (except the airports that serve the NYC region) and arrives at one of airports that serve the NYC region.\nThe departure airports are computed based on the distinct destination airports in flights data frame of nycflights23outbound . It happens to be that there are some airports for which the data cannot be fetched. Hence, the destination airports are filtered based on whether their FAA code appears in the faa column of airports data frame.\nAll the outbound flights are obtained for the computed list of airports. However, the flights data frame of nycflights23inbound consists of flights that depart and arrive at any airport within the United States. Therefore, all flights that do not arrive in the airports that serve NYC are filtered out based on the dest column of flights data frame.\n\n\nCode\nall_airports &lt;- nycflights23outbound$airports$faa\n\ndest_airports &lt;- nycflights23outbound$flights |&gt;\n                     filter(dest %in% all_airports & !dest %in% STATIONS) |&gt;\n                        select(\"dest\") |&gt;\n                           unique()\n\ndest_airports &lt;- dest_airports$dest\n\nnycflights23inbound &lt;- anyflights::anyflights(station = dest_airports,\n                                               year = YEAR)\n\nnycflights23inbound$flights &lt;- nycflights23inbound$flights |&gt;\n                                   filter(dest %in% STATIONS)\n\nsave_data(data = nycflights23inbound,\n          flight_type = \"inbound\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-consolidation",
    "href": "data.html#data-consolidation",
    "title": "2  Data",
    "section": "2.3 Data consolidation",
    "text": "2.3 Data consolidation\nIn the previous section, the data is collected into two different list: nycflights23inbound and nycflights23outbound . Each of these lists contain five data frames: flights, weather, planes, airports, and airlines. The airports and airlines data frames remain the same for inbound and outbound flights. The data for the flights, weather, and planes must be combined respectively.\n\n2.3.1 Flights data\nAll the rows in the inbound and outbound flights data frames are combined into a single data frame using rbind() powered by the dplyr package. The combined flights data is sorted based on the primary key of the flights table.\n\n\nCode\nnycflights23 &lt;- rbind(nycflights23inbound$flights,\n                      nycflights23outbound$flights)\n\nnycflights23 &lt;- nycflights23 |&gt;\n                  arrange(year, month, day, hour, flight)\n\nwrite.csv(x = nycflights23,\n          file = \"data/raw/flights.csv\")\n\n\n\n\n2.3.2 Weather\nThe weather data frame consists of the hourly weather parameters of the airport. The inbound and outbound weather data frames contain data for different set of airports. Therefore, both of them need to be joined in a similar way as that of flights data.\n\n\nCode\nweather &lt;- rbind(nycflights23inbound$weather,\n                 nycflights23outbound$weather)\n\nweather &lt;- weather |&gt;\n             arrange(origin, year, month, day, hour)\n\nwrite.csv(x = weather,\n          file = \"data/raw/weather.csv\")\n\n\n\n\n2.3.3 Planes\nThe planes data frame stored the production details for each aircraft based on its tailnum. Generally, the plane that operates the inbound flight also operates the outbound flight. However, since the NYC airports are hubs for a majority of US carriers, there is a possibility that an aircraft is changed for the onward flight.\nTherefore, all the planes operating the inbound flights is considered and all planes for outbound flights that are not in set of planes that operated in the inbound flights are considered. At the end, the data is consolidate to get production details of all the aircraft operating on the routes in the flights data frame.\n\n\nCode\ntailnum &lt;- unique(nycflights23$tailnum)\n\nplanes_inbound &lt;-\n  planes_inbound |&gt;\n    filter(planes_inbound$planes.tailnum %in% tailnum)\n\nplanes_outbound &lt;-\n   planes_outbound |&gt;\n     filter(!planes_outbound$planes.tailnum %in% planes_inbound$planes.tailnum)\n\nplanes &lt;- rbind(planes_inbound, planes_outbound)\n\nwrite.csv(x = planes,\n          file = \"data/raw/planes.csv\")\n\n\nFinally, all the data is stored in /data directory under the /raw sub-directory since no data cleaning has been performed on it yet. The /raw sub-directory contains the .csv files for consolidated data and has two further sub-directories /inbound and /outbound with the respective .csv files.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.4 Missing value analysis",
    "text": "2.4 Missing value analysis\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(DataExplorer)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(purrr)\n\n\n\n\nCode\nairlines_data &lt;- read.csv(\"data/raw/airlines.csv\") |&gt; \n                                subset(select = -c(X))\n# head(airlines_data)\n\nairports_data &lt;- read.csv(\"data/raw/airports.csv\") |&gt; \n                                subset(select = -c(X))\n# head(airports_data)\n\nflights_data &lt;- read.csv(\"data/raw/flights.csv\") |&gt;\n                                subset(select = -c(X))\n# head(flights_data)\n\nplanes_data &lt;- read.csv(\"data/raw/planes.csv\") |&gt; \n                                subset(select = -c(X, X.1))\n# head(planes_data)\n\nweather_data &lt;- read.csv(\"data/raw/weather.csv\") |&gt; \n                                subset(select = -c(X))\n# head(weather_data)\n\n\n\n\nCode\n# missing values in airline data\nairlines_data |&gt; plot_missing(title = \"Missing Values in Airlines Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in airports data\nairports_data |&gt; plot_missing(title = \"Missing Values in Airports Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in flights data\nflights_data |&gt; plot_missing(title = \"Missing Values in Flights Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in planes data\nplanes_data |&gt; plot_missing(title = \"Missing Values in Planes Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in weather data\nweather_data |&gt; plot_missing(title = \"Missing Values in Weather Data\")\n\n\n\n\n\n\n\n\n\n\nThe airlines_data stores the airline code and name. Hence, it does not have any null values\nThe airports_data has 9.51% missing values in airports.tzone column. However, it can be derived from the airports.tz column\nFlights_data has null values for actual time of departure and arrival. However, there are no null values in the scheduled time of departure and arrival.\nIn the planes_data, the year column has null values which do not have any significance behind them.\nThe weather_data however has several missing values. In fact, more than 95% of the values are missing in 5 of the columns - precip, temp, deep, humid, pressure. Thus, these features may be dropped.\n\n\n\nCode\ndatasets &lt;- list(\n  airlines = airlines_data,\n  airports = airports_data,\n  flights = flights_data,\n  planes = planes_data,\n  weather = weather_data\n)\n\n# Calculate missing values for each dataset\nmissing_summary &lt;- map_dfr(datasets, ~ {\n  data.frame(\n    Dataset = deparse(substitute(.x)),\n    Total_Values = prod(dim(.x)),\n    Missing_Values = sum(is.na(.x)),\n    Proportion_Missing = sum(is.na(.x)) / prod(dim(.x))\n  )\n}, .id = \"Dataset\")\n\n# Plot comparison of missing values\nggplot(missing_summary, aes(x = Dataset, y = Proportion_Missing, fill = Dataset)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = scales::percent(Proportion_Missing, accuracy = 0.1)), \n            vjust = -0.5, \n            size = 4) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"Proportion of Missing Values Across Datasets\",\n    x = \"Dataset\",\n    y = \"Proportion of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nWeather_data has a high percentage of missing values (33.2%) while the rest of the data has barely any missing values.\nHowever, most of the missing values for weather_data are concentrated among 5 features.\nHence, after we remove these 5, the proportion of missing values for weather will come down drastically.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-values-in-flights-data",
    "href": "data.html#missing-values-in-flights-data",
    "title": "2  Data",
    "section": "2.5 Missing values in flights data",
    "text": "2.5 Missing values in flights data\n\n\nCode\nlibrary(redav)\n\n\n\nAttaching package: 'redav'\n\n\nThe following object is masked from 'package:DataExplorer':\n\n    plot_missing\n\n\nCode\nmv_cols &lt;- c(\"dep_delay\", \"arr_delay\", \"arr_time\", \"dep_time\", \n             \"air_time\", \"tailnum\")\n\nplot_missing(flights_data[mv_cols], percent = TRUE)\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nThere three noticeable patterns in missing values in the flights data frame:\n\nThe first case is of a cancellation before aircraft allocation when all the six columns are missing.\nThe second case is of a cancellation after aircraft allocation when all the columns except tailnum are missing.\nThe third case is of a diversion when the arr_delay, arr_time, and air_time are missing. This implies that the aircraft was scheduled to arrive but did not arrive.\n\nHowever, in the fourth case, it is possible (but not certain) that the plane took off and faced a technical issue and landed back to the origin or one of NYC airports.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Loading the datasets\nAll the five datasets (or tables) are loaded into the environment.\nCode\nflights &lt;- read.csv(\"data/raw/flights.csv\")\nairlines &lt;- read.csv(\"data/raw/airlines.csv\")\nairports &lt;- read.csv(\"data/raw/airports.csv\")\nweather &lt;- read.csv(\"data/raw/weather.csv\")\nplanes &lt;- read.csv(\"data/raw/planes.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#loading-the-required-modules",
    "href": "results.html#loading-the-required-modules",
    "title": "3  Results",
    "section": "3.2 Loading the required modules",
    "text": "3.2 Loading the required modules\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(forcats)\nlibrary(ggrepel)\nlibrary(ggalluvial)\nlibrary(reshape2)\n\n\n\nAttaching package: 'reshape2'\n\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\n\nCode\nNYC_AIRPORTS = c(\"LGA\", \"JFK\", \"EWR\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#on-time-performance-analysis-rq1-2",
    "href": "results.html#on-time-performance-analysis-rq1-2",
    "title": "3  Results",
    "section": "3.3 On-time performance Analysis (RQ1-2)",
    "text": "3.3 On-time performance Analysis (RQ1-2)\nOn-time performance is defined as the percentage of flights that departed or arrived on-time. As per the rules of Federal Aviation Administration (FAA), a flight is consider to be on-time if it arrives or departs within a buffer of 15 minutes to its schedule.\nIn this analysis, the inbound and outbound traffic is treated separately (flight_type). For each type of traffic, two on-time performance metrics are computed as follows:\n\nstrict_otp : It considers the percentage of flights which were strictly early or on-time (*_delay &lt;= 0).\notp_increase: It considers the increase in percentage of on-time flights which were within 15 minutes of delay (*_delay &lt;= 15).\n\nThis data is plotted as a stacked bar plot with the strict_otp denoted by green color and otp_increase denoted by yellow color.\n\n3.3.1 By the airport (RQ1)\nThe data is grouped by the origin (in case of outbound flights) or the destination (in case of inbound flights) to capture trends in inbound and outbound for the NYC_AIRPORTS .\n\n\nCode\ninbound &lt;- flights |&gt; filter(!origin %in% NYC_AIRPORTS)\noutbound &lt;- flights |&gt; filter(origin %in% NYC_AIRPORTS)\n\ninbound_otp &lt;- inbound |&gt; drop_na() |&gt;\n  group_by(dest) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(arr_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(arr_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"inbound\")\n\noutbound_otp &lt;- outbound |&gt; drop_na() |&gt; \n  group_by(origin) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(dep_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(dep_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"outbound\")\n\notp &lt;- rbind(inbound_otp |&gt; rename(airport = dest), \n             outbound_otp |&gt; rename(airport = origin))\n\n\n\n\nCode\notp |&gt; select(airport, otp_increase, strict_otp, flight_type) |&gt; \n  pivot_longer(!c(airport, flight_type), \n               names_to = \"otp_type\", \n               values_to = \"otp\") |&gt;  \n  ggplot(aes(x = flight_type, y = otp, fill = otp_type)) + \n  geom_col() + facet_wrap(~airport) +\n  scale_fill_manual(values = c(\"#ffc300\", \"#32de84\"),\n                    name = \"delay criteria\", \n                    labels = c(\"&lt;= 15 minutes\", \"&lt;= 0 minutes\")) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"On-time performance for the airports serving NYC (2023)\",\n    x = \"Type of Flight\",\n    y = \"On-time performance (in %)\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe inbound and outbound flights at JFK and LGA had almost the same on-time performance.\nHowever, at EWR, the inbound flights had slightly better on-time performance than outbound flights.\n\n\n\n3.3.2 By the airline (RQ2)\nIn addition to the airport (origin or dest), the data is grouped by the carrier (or airline) to capture trends in the on-time performance of the different carriers for the inbound and outbound traffic at the NYC_AIRPORTS.\n\n\nCode\ninbound &lt;- flights |&gt; filter(!origin %in% NYC_AIRPORTS)\noutbound &lt;- flights |&gt; filter(origin %in% NYC_AIRPORTS)\n\ninbound_otp &lt;- inbound |&gt; drop_na() |&gt; \n  group_by(dest, carrier) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(arr_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(arr_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"inbound\")\n\n\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\nCode\noutbound_otp &lt;- outbound |&gt; drop_na() |&gt; \n  group_by(origin, carrier) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(dep_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(dep_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"outbound\")\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\notp &lt;- rbind(inbound_otp |&gt; rename(airport = dest), \n             outbound_otp |&gt; rename(airport = origin))\n\n\n\n\nCode\notp |&gt; select(carrier, airport, otp_increase, strict_otp, flight_type) |&gt; \n  pivot_longer(!c(carrier, airport, flight_type), \n               names_to = \"otp_type\", values_to = \"otp\") |&gt;  \n  ggplot(aes(x = carrier, y = otp, fill = otp_type)) + \n  geom_col() + facet_grid(flight_type ~ airport,\n                          scales=\"free\",\n                          space = \"free\") +\n  scale_fill_manual(values = c(\"#ffc300\", \"#32de84\"),\n                    name = \"delay criteria\", \n                    labels = c(\"&lt;= 15 minutes\", \n                               \"&lt;= 0 minutes\")) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"On-time performance for the airlines serving NYC region (2023)\",\n    x = \"Airline Code\",\n    y = \"On-time performance (in %)\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe pattern in the on-time performance of inbound and outbound flights is similar in most cases.\nAllegiant Air (G4) had the best on-time performance at EWR (also among all the three airports). However, it had the least market share implying that it operated fewer domestic flights but had a very good on-time performance for them.\nUnited Airlines (UA) and Republic Airlines (YX) have a large market share at EWR and also have a commendable on-time performance for that operational scale.\nJetBlue (B6) has the highest market share at JFK but has a relatively weaker on-time performance especially for outbound flights.\nHawaiian Airlines (HA) operates very few domestic flights to JFK but had a very weak on-time performance. Moreover, it turns out that many of their flights arrived within the 15 minute buffer period.\nFrontier Airlines (F9) had the worst on-time performance for outbound flights among all airlines.\n\nThis plot also highlights that analyse the on-time performance of airlines the market share must be taken into account to consider the operational scale of airline at the airport. This plot is supplements the plot for on-time performance of airlines to gather more informed insights.\n\n\n3.3.3 Market share of the airline by the airport (RQ2)\nThe market share of a carrier is defined as the percentage of flights operated by the carrier . In the context of aviation data, the market share can be computed based on the airport (i.e. origin or dest) and route (i.e. a unordered tuple of origin and dest). For the neatness of the plot, the most popularly known carriers are given their own entry. While, the other carriers, are clubbed into a single \"Other\" category.\n\n\nCode\nairlines &lt;- c(\"DL\", \"AA\", \"UA\", \"WN\", \"B6\", \"YX\", \"9E\")\ninbound$carrier &lt;- ifelse(inbound$carrier %in% airlines, \n                                    inbound$carrier, \"Other\")\n\noutbound$carrier &lt;- ifelse(outbound$carrier %in% airlines, \n                                   outbound$carrier, \"Other\")\n\ninbound_mkt &lt;- inbound |&gt; select(carrier, dest) |&gt; \n  group_by(dest, carrier) |&gt;\n     summarise(num_flights = n())\n\n\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\nCode\noutbound_mkt &lt;- outbound |&gt; select(carrier, origin) |&gt; \n  group_by(origin, carrier) |&gt;\n     summarise(num_flights = n())\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\nairport_mkt_share &lt;- \n  inner_join(rename(inbound_mkt, airport = dest), \n                    rename(outbound_mkt, airport = origin), \n                    by = c(\"carrier\", \"airport\")) |&gt; \n                      mutate(total_flights = num_flights.x + num_flights.y,\n                             mkt_share = total_flights/sum(total_flights)*100.0,\n                             mkt_share = round(mkt_share))\n\n\n\n\nCode\nfill_color = c(\"DL\" = \"#EE7663\", \"AA\" = \"#A0BEF5\", \"WN\" = \"lightgreen\",\n               \"UA\" = \"cornflowerblue\", \"B6\" = \"gold\", \"Other\" = \"#91AFB3\",\n               \"YX\" = \"#85decb\", \"9E\" = \"#d959c6\")\n\nairport_mkt_share |&gt; ggplot(aes(x = airport, \n                            y = mkt_share/100, fill = fct_reorder(carrier, \n                                                                  mkt_share))) +\n                     geom_col(position = \"stack\", width = 0.3) +\n                     geom_text(aes(label = mkt_share), \n                               position = position_stack(vjust = .5),\n                               size = 3.5) +\n                     scale_fill_manual(values = fill_color,\n                                       name = \"carrier\") +\n                     scale_y_continuous(labels = scales::percent) +\n                     labs(title = \"Marketshare of Carrier by Airport (2023)\", \n                          x = \"Airport\", \n                          y = \"Market Share (in %)\") + \n                     coord_flip() +\n                     theme_minimal()\n\n\n\n\n\n\n\n\n\n\nThe domestic market share at LGA was dominated by Delta Airlines (DL) and American Airlines (AA). This is because Endeavor Airlines (9E) is a subsidiary of Delta Airlines and Republic Airlines (YX) operates under contract for Delta, American, and United.\nThe domestic market share at JFK was dominated by JetBlue Airlines (B6) and Delta Airlines (DL).\nUnited Airlines (UA) dominated more than half of the domestic market share at EWR.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#analysis-of-delayed-flights-rq3-rq5",
    "href": "results.html#analysis-of-delayed-flights-rq3-rq5",
    "title": "3  Results",
    "section": "3.4 Analysis of Delayed flights (RQ3-RQ5)",
    "text": "3.4 Analysis of Delayed flights (RQ3-RQ5)\nThe *_delay is generally categorized into seven categories: less than 10 minutes, 10-20 minutes, 20-40 minutes, 40-60 minutes, and more than 60 minutes. However, as a part of the on-time performance analysis, the *_delay &lt;= 15 minutes considered to be on-time. Therefore, we use four categories: 15-30 minutes, 30-45 minutes, 45-60 minutes, and more than 60 minutes (of equal bin width of 15 minutes).\nNote: All flights explored in RQ3 and RQ4 are the ~20% delayed domestic flights from RQ1. They are given 100% proportion for better analysis.\n\n3.4.1 Distribution of delayed flights (RQ3)\n\n\nCode\ncategorize_delay &lt;- function(x) {\n  if (x &lt;= 15) {\n    return(\"&lt;=15\")\n  } else if (x &gt; 15 & x &lt;= 30) {\n    return(\"15-30\")\n  } else if (x &gt; 30 & x &lt;= 45) {\n    return(\"30-45\")\n  } else if (x &gt; 45 & x &lt;= 60) {\n    return(\"45-60\")\n  } else {\n    return(\"&gt;60\")\n  }\n}\n\ninbound &lt;- inbound |&gt; drop_na() |&gt; \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n         arr_delay_fct = sapply(arr_delay, categorize_delay),\n         flight_type = \"inbound\")\n\noutbound &lt;- outbound |&gt; drop_na() |&gt;  \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n         arr_delay_fct = sapply(arr_delay, categorize_delay),\n         flight_type = \"outbound\")\n\nnycflights &lt;- rbind(inbound |&gt; \n                      select(dest, arr_delay_fct, flight_type) |&gt; \n                        rename(airport = dest, delay_fct = arr_delay_fct),\n                    outbound |&gt; \n                      select(origin, dep_delay_fct, flight_type) |&gt; \n                        rename(airport = origin, delay_fct = dep_delay_fct))\n\nnycflights$delay_fct &lt;- factor(nycflights$delay_fct, \n                               levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                          \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\nfill_color = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\")\n\nnycflights |&gt; filter(delay_fct != \"&lt;=15\") |&gt; \n  group_by(airport, flight_type, delay_fct) |&gt; summarise(count = n()) |&gt; \n    mutate(percentage = round(count/sum(count)*100, 2)) |&gt;\n      ggplot(aes(x = flight_type, y = percentage, fill = fct_rev(delay_fct))) + \n      geom_col(position = \"stack\") + facet_wrap(~airport) +\n      scale_fill_manual(values = fill_color, name = \"delay ranges\") +\n      geom_text(aes(label = percentage),\n                position = position_stack(vjust = .5),\n                size = 3.5) +\n      labs(\n        title = \"Distribution of delayed flights for NYC airports (2023)\",\n        x = \"Type of Flight\",\n        y = \"Percentage of delayed flights\"\n      )\n\n\n`summarise()` has grouped output by 'airport', 'flight_type'. You can override\nusing the `.groups` argument.\n\n\n\n\n\n\n\n\n\n\nAcross the NYC_AIRPORTS, around 40% of delayed flights experience delays exceeding 60 minutes, indicating significant on-time performance challenges.\nJFK has slightly better performance in shorter delay categories (15–30, 30-45, 45-60 minutes). On the other hand, it has the highest proportion of long delays (&gt;60 minutes).\n\nThe delay patterns for inbound and outbound flights are very similar. This poses an interesting question whether the inbound flights have their departure (dep_delay) and arrival delay (arr_delay) in same category and therefore, is there a cascading effect of delays? (motivation for RQ4)\n\n\n3.4.2 Cascading effects of departure delays (RQ4)\nCascading effect of delays hints to whether the arrival delay (arr_delay) falls in the same range as that of the departure delay (dep_delay). The absence of a cascading effect implies that the departure delay (dep_delay) is mitigated in the air_time of the flight and arrival delay (arr_delay) is in a lower range.\nIn order to answer this question, we visualize the flow between the ranges of dep_delay and arr_delay with the help of an alluvial plot.\nNote: the case of departure and arrival delay both being “&lt;=15” is ignored to focus on the other flights.\n\n\nCode\nnycflights &lt;- rbind(inbound, outbound)\n\nnycflights$dep_delay_fct &lt;- factor(nycflights$dep_delay_fct, \n                                   levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                              \"45-60\", \"&gt;60\"))\n\nnycflights$arr_delay_fct &lt;- factor(nycflights$arr_delay_fct, \n                                   levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                              \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\nfill_color = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\", \"&lt;=15\" = \"green3\")\n\ndf &lt;- nycflights |&gt; filter(!dep_delay_fct == \"&lt;=15\" & !arr_delay_fct == \"&lt;15\") |&gt;\n  group_by(dep_delay_fct, arr_delay_fct) |&gt;\n   summarise(n = n())\n\ndf |&gt; drop_na() |&gt; \n  ggplot(aes(y = n/1000, axis1 = dep_delay_fct, axis2 = arr_delay_fct)) +\n  geom_alluvium(aes(fill = arr_delay_fct)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  scale_x_discrete(limits = c(\"Departure Delay\", \"Arrival Delay\"),\n                   expand = c(.05, .05)) +\n  scale_y_continuous() +\n  scale_fill_manual(values = fill_color, name = \"delay ranges\") +\n      labs(\n        title = \"Cascading effect of departure delay (2023)\",\n        x = \"Type of delay\",\n        y = \"Number of flights (in thousands)\"\n      )\n\n\n\n\n\n\n\n\n\n\nA significant number of flights with 15–30 departure delays arrive with &lt;= 15 minutes arrival delays, thus showing effective delay recovery mechanisms for short delays, likely due to buffer times in schedules or improved flight management during transit.\nFor flights in the 30–60 minutes departure delay ranges, most flights either maintain or reduce the subsequent delay in arrival, once again showing an effective delay recovery mechanism likely due to adjustment made in the speed and reducing the air_time.\nFlights with departure delays exceeding 60 minutes overwhelmingly result in arrival delays within the same category (&gt;60). This emphasizes the difficulty in recovering schedules once delays surpass the 1-hour mark.\n\nThis plot also highlights that it is expected to have a higher correlation between arr_delay and dep_delay.\n\n\n3.4.3 Correlation between factors affecting the delays (RQ5)\nIn context of aviation data, there are several real-time factors that impact the arr_delay. This data set covers couple of those factors:\n\nvisibility: impacts the ability of the pilots to spot the runway for landing and take-off.\nwind_speed: makes landing harder and may result in “go around” that lead to increased arrival delays.\nplane_age: keeps risks of technical issues if the plane is not maintained properly.\nair_time: may contribute to arrival delay if an alternate longer route is chosen in case of turbulence or diversions.\nhour: defines the weather and air-traffic conditions which affects the landing of the plane.\n\n\n\nCode\nflights_planes &lt;- inner_join(flights, \n                             planes |&gt; rename(tailnum = planes.tailnum), \n                             by = c(\"tailnum\"))\n\nflights_planes &lt;- flights_planes |&gt; \n  rename(dep_hour = hour) |&gt; \n  mutate(arr_hour = sched_arr_time%/%100, \n         plane_age = 2024 - planes.year)\n\nflights_planes_weather &lt;- inner_join(flights_planes |&gt; rename(hour = arr_hour),\n                                     weather |&gt; rename(dest = origin), \n                                     by = c(\"dest\", \"month\", \"day\", \"hour\"))\n\ndf &lt;- flights_planes_weather |&gt; select(arr_delay, dep_delay, hour, air_time,\n                                       wind_speed, visib, plane_age)\n\ncorr_mat &lt;- round(cor(df |&gt; drop_na()), 2)\n\nmelt(corr_mat) |&gt; \n  ggplot(aes(x = Var1, y = Var2, fill=value)) + \n  geom_tile() + geom_text(aes(label = value), color = \"white\", size = 4) +\n  labs(\n    title = \"Factors affecting the arrival delay (2023)\",\n    x = \"Factors affecting delays\",\n    y = \"Factors affecting delays\"\n  )\n\n\n\n\n\n\n\n\n\n\nAs expected from RQ4, the dep_delay is highly correlated to the arr_delay.\nThe weather conditions and air-traffic change hourly. Hence, there is is slight positive correlation between the hour and the arr_delay. (A worse weather condition worsens the delays and high air-traffic congestion increases the arr_delay)\nThe wind_speed and arr_delay show a weak positive correlation (0.07) implying that strong winds increase the arr_delay due to go-arounds but the magnitude of correlation is low since the instances of strong winds are short-lived.\nVisibility (visib) has a slight negative correlation which implies that lower the visibility, higher the delay. Similar to wind_speed, instances of low visib are short-lived owing to a weak magnitude of correlation.\nVariables like plane_age and air_time have nearly no meaningful correlation with arrival delay. This is likely because a plane can be old but may be maintained “like-new” by the carrier and hence date of recent maintenance if available would be a better factor to consider.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#air-traffic-rq6",
    "href": "results.html#air-traffic-rq6",
    "title": "3  Results",
    "section": "3.5 Air Traffic (RQ6)",
    "text": "3.5 Air Traffic (RQ6)\nAir Traffic is the number of planes awaiting to land or take-off. Therefore, this quantity can be defined on an hourly or monthly or yearly basis. However, hourly air-traffic is the most accurate to capture patterns.\nIn this analysis, the quarterly hourly air-traffic is computed for both inbound and outbound flights. The deviation in the scheduled and actual air-traffic is analysed.\nNote: The dataset provides sched_arr_time, arr_time(actual time), sched_dep_time, and dep_time(actual time) for each flight. If the time is 5:50am, it is given by 550 while 5:50pm is given by 1750. Therefore, integer division by 100 gives the hour of day.\n\n\nCode\nmonth2quarter &lt;- function(month) {\n  if (month %in% c(1, 2, 3)) {\n    return(\"Q1\")\n  } else if (month %in% c(4, 5, 6)) {\n    return(\"Q2\")\n  } else if (month %in% c(7, 8, 9)) {\n    return(\"Q3\")\n  } else {\n    return(\"Q4\")\n  }\n}\n\ninbound_ &lt;- inbound |&gt; drop_na() |&gt; \n  rename(sched_dep_hour = hour) |&gt; \n    mutate(sched_arr_hour = sched_arr_time%/%100,\n           arr_hour = arr_time%/%100,\n           dep_hour = dep_time%/%100,\n           qtr = sapply(month, month2quarter))\noutbound_ &lt;- outbound |&gt; drop_na() |&gt; \n  rename(sched_dep_hour = hour) |&gt; \n    mutate(sched_arr_hour = sched_arr_time%/%100,\n           arr_hour = arr_time%/%100,\n           dep_hour = dep_time%/%100,\n           qtr = sapply(month, month2quarter))\n\nair_traffic_ &lt;- rbind(inbound_ |&gt; select(dest, arr_hour, sched_arr_hour, qtr) |&gt; \n                        rename(airport = dest,\n                               hour = arr_hour,\n                               sched_hour = sched_arr_hour),\n                      outbound_ |&gt; select(origin, dep_hour, \n                                          sched_dep_hour, qtr) |&gt; \n                        rename(airport = origin,\n                               hour = dep_hour,\n                               sched_hour = sched_dep_hour))\n\nsched_air_traffic &lt;- air_traffic_ |&gt; \n  group_by(airport, sched_hour, qtr) |&gt;\n    summarise(scheduled = n())\n\n\n`summarise()` has grouped output by 'airport', 'sched_hour'. You can override\nusing the `.groups` argument.\n\n\nCode\nair_traffic &lt;- air_traffic_ |&gt; \n  group_by(airport, hour, qtr) |&gt; \n    summarise(actual = n())\n\n\n`summarise()` has grouped output by 'airport', 'hour'. You can override using\nthe `.groups` argument.\n\n\nCode\nair_traffic$hour &lt;- factor(air_traffic$hour, \n                           levels = c(0:24))\nsched_air_traffic$sched_hour &lt;- factor(sched_air_traffic$sched_hour, \n                                       levels = c(0:24))\n\nair_traffic &lt;- \n  left_join(air_traffic, sched_air_traffic |&gt; \n              rename(hour = sched_hour),\n            by = c(\"airport\", \"hour\", \"qtr\"))\n\nair_traffic[is.na(air_traffic)] &lt;- 0\n\n\n\n\nCode\nair_traffic |&gt; pivot_longer(!c(\"airport\", \"hour\", \"qtr\"), \n                            values_to = \"numflights\", names_to = \"type\") |&gt; \n  ggplot(aes(x = hour, y = numflights, color = type, group = type)) +\n   geom_line() + facet_grid(qtr~airport, scales=\"free_x\", space = \"free_x\") + \n   scale_x_discrete(breaks = c(0, 4, 8, 12, 16, 20, 24)) +\n   scale_color_manual(values = c(\"scheduled\" = \"tomato\", \"actual\" = \"darkblue\"), \n                      name = \"Type of air traffic\") +\n   labs(\n      title = \"Scheduled Air Traffic v/s Actual Air Traffic (2023)\", \n      subtitle = \"over the four quarters\",\n      x = \"Hour of the day\",\n      y = \"Number of flights\") +\n   theme_gray(16) +\n   theme(legend.position=\"bottom\",\n         strip.text.y = element_text(angle = 0))\n\n\n\n\n\n\n\n\n\n\nThe frequency of flights is highest between hours 6 to 20 and is low at other times. For all 3 airports, the scheduled and actual number of flights are pretty close to each other, with major overlap, indicating efficient on-time performance consistently.\nOver the 4 quarters, we observe similar patterns in flight frequency for a particular airport. This tells us that each airport maintains its same schedule throughout the 4 quarters. Of course, the schedule is different for different airports.\nThe curves for LGA are pretty uniform because it is a domestic airport (except flights from Canada) and hence the dataset depicts its patterns well. On the other hand, a significant share of the air-traffic at JFK and EWR is governed by international air traffic.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#monthly-trends-in-delays-rq7",
    "href": "results.html#monthly-trends-in-delays-rq7",
    "title": "3  Results",
    "section": "3.6 Monthly trends in delays (RQ7)",
    "text": "3.6 Monthly trends in delays (RQ7)\nThe monthly trends in the delay show the variation in the number of delayed flights (across the four categories) by the season of the year (i.e. Spring, Summer, Fall, Winter). It is computed by grouping the data over the month and *_delay category.\n\n\nCode\ninbound &lt;- inbound |&gt; drop_na() |&gt; \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n                                arr_delay_fct = sapply(arr_delay, \n                                                       categorize_delay),\n                                flight_type = \"inbound\")\n\noutbound &lt;- outbound |&gt; drop_na() |&gt;  \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n                                arr_delay_fct = sapply(arr_delay, \n                                                       categorize_delay),\n                                flight_type = \"outbound\")\n\nnycflights &lt;- rbind(inbound |&gt; \n                      select(dest, arr_delay_fct, flight_type, month) |&gt; \n                        rename(airport = dest, delay_fct = arr_delay_fct),\n                    outbound |&gt; \n                      select(origin, dep_delay_fct, flight_type, month) |&gt; \n                        rename(airport = origin, delay_fct = dep_delay_fct))\n\nnycflights$delay_fct &lt;- factor(nycflights$delay_fct, \n                               levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                          \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\ncolors = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \n           \"30-45\" = \"#ffa200\", \"15-30\" = \"gold\")\n\nnycflights |&gt; filter(delay_fct != \"&lt;=15\") |&gt; \n  group_by(month, delay_fct, airport) |&gt; \n  summarise(count = n()) |&gt; mutate(percentage = count/sum(count)) |&gt;\n    ggplot(aes(x = factor(month), y = percentage, \n               color = delay_fct, group = delay_fct)) + \n    geom_line() +\n    facet_wrap(.~airport, scale = \"free_x\", ncol = 1) + \n    scale_y_continuous(labels = scales::percent) +\n    scale_color_manual(values = colors, name = \"delay ranges\") +\n    scale_x_discrete(labels = month.abb) +\n    labs(\n      title = \"Percentage of delayed flights over the 12 months (2023)\",\n      x = \"Month\",\n      y = \"Percentage of delayed flights\") +\n    theme(legend.position=\"bottom\")\n\n\n`summarise()` has grouped output by 'month', 'delay_fct'. You can override\nusing the `.groups` argument.\n\n\n\n\n\n\n\n\n\n\nEWR observes a peak in delays during the Spring season followed by a dip in the Summer and Fall seasons. JFK observes a gradual increase in delays throughout the year resulting in a peak in the Fall season. LGA, on the other hand, observes a peak in delays during the Winter months, followed by a big dip in the Spring season, and then average delays in the remaining months.\nThus, each airport observes a different pattern throughout the year, there isn’t much similarity between them.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#geo-spatial-distribution-of-delay-rq8",
    "href": "results.html#geo-spatial-distribution-of-delay-rq8",
    "title": "3  Results",
    "section": "3.7 Geo-spatial distribution of delay (RQ8)",
    "text": "3.7 Geo-spatial distribution of delay (RQ8)\nThe geo-spatial location of an airport is provided by the latitude (lat) and longitude (lon) in the airports data frame. This data provides an understanding into the routes out of NYC_AIRPORTS and their average arr_delay (for inbound flights) and dep_delay (for outbound flights).\nNote: The US airports in Alaska and Hawaii are ignored for this analysis. Moreover, airport codes are provided only for those airports where the performance deviates from on-time (i.e. avg_*_delay &lt;= 15).\n\n\nCode\ncolors = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\", \"&lt;=15\" = \"green3\")\n\nstates = map_data(\"state\")\nairports_usa &lt;- airports |&gt; \n  filter(airports.lon &lt; 0 & airports.lat &lt; 50 & airports.lon &gt; -140)\n\ninbound_avg_delay &lt;- \n  inner_join(inbound, \n             airports_usa |&gt; rename(origin = airports.faa), \n             by = c(\"origin\")) |&gt; \n  group_by(origin, airports.lat, airports.lon) |&gt; \n  summarise(avg_arr_delay = sapply(mean(arr_delay), categorize_delay))\n\n\n`summarise()` has grouped output by 'origin', 'airports.lat'. You can override\nusing the `.groups` argument.\n\n\nCode\noutbound_avg_delay &lt;- \n  inner_join(outbound, \n             airports_usa |&gt; rename(dest = airports.faa), \n             by = c(\"dest\")) |&gt; \n  group_by(dest, airports.lat, airports.lon) |&gt; \n  summarise(avg_dep_delay = sapply(mean(dep_delay), categorize_delay))\n\n\n`summarise()` has grouped output by 'dest', 'airports.lat'. You can override\nusing the `.groups` argument.\n\n\nCode\ninbound_avg_delay$avg_arr_delay &lt;- \n  factor(inbound_avg_delay$avg_arr_delay, \n         levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \"45-60\", \"&gt;60\"))\n\ninbound_avg_delay$avg_dep_delay &lt;- \n  factor(outbound_avg_delay$avg_dep_delay, \n         levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \"45-60\", \"&gt;60\"))\n\ninbound_avg_delay &lt;- inbound_avg_delay |&gt; \n  rename(inbound = avg_arr_delay,\n         outbound = avg_dep_delay)\n\ninbound_avg_delay &lt;- inbound_avg_delay |&gt; \n  pivot_longer(!c(\"origin\", \"airports.lat\", \"airports.lon\"),\n               values_to = \"delay\",\n               names_to = \"flight_type\")\n\n\n\n\nCode\nggplot(data = states) +\n     geom_polygon(mapping=aes(x = long,y = lat,group = group),\n                              color = \"black\",fill = \"white\") +\n     geom_point(data = inbound_avg_delay,\n                mapping = aes(x = airports.lon, y = airports.lat, \n                              color = delay)) +\n     geom_text_repel(data = inbound_avg_delay |&gt; \n                              filter(delay %in% c(\"45-60\", \"&gt;60\")), \n                     mapping = aes(x = airports.lon, y = airports.lat, \n                                   label = origin), color = \"tomato\", \n                                   nudge_y = -0.6) +\n     geom_text_repel(data = inbound_avg_delay |&gt; \n                              filter(delay %in% c(\"15-30\", \"30-45\")), \n                     mapping = aes(x = airports.lon, y = airports.lat, \n                                 label = origin), color = \"black\", \n                                 nudge_y = -0.6) +\n     facet_wrap(~flight_type, ncol = 2) +\n     scale_color_manual(values = colors, name = \"delay ranges\") +\n     theme(legend.position = \"bottom\") +\n     labs(\n          title = \"Inbound (arr_delay) and Outbound (dep_delay) flight delay by airports (2023)\",\n          x = \"Longitude\",\n          y = \"Latitude\")\n\n\n\n\n\n\n\n\n\n\nWe observe that on the East Coast (short distance flights), most airports have a &lt;=15 minute delay range whereas on the West Coast (long distance flights), there are many airports that belong to higher delay ranges.\nThere are more airports in the 15-30 minute delay range in outbound as compared to inbound. However, in the high delay ranges (of greater than 30 minutes), inbound is more than outbound. Overall, there is a decent similarity between the two, with a few differences.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#delays-for-top-10-busiest-routes-rq9",
    "href": "results.html#delays-for-top-10-busiest-routes-rq9",
    "title": "3  Results",
    "section": "3.8 Delays for Top-10 busiest routes (RQ9)",
    "text": "3.8 Delays for Top-10 busiest routes (RQ9)\nTop-k busiest routes are defined as those routes which have Top-k frequency of yearly flights. For this analysis, the set of airlines is restricted to American (AA), Delta (DL), United (UA), and JetBlue (B6).\nNote: Here, k = 10. Moreover, unordered pairs of origin and dest are only considered and the analysis is broken down into inbound and outbound flights.\n\n\nCode\npopular_airlines = c(\"AA\", \"DL\", \"UA\", \"B6\")\n\ncolors = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\", \"&lt;=15\" = \"green3\")\n\nbusiest_routes &lt;- inbound |&gt; \n  select(origin, dest, dep_delay, arr_delay) |&gt; drop_na() |&gt; \n    group_by(origin, dest) |&gt; \n      summarise(numflights = n()) |&gt; \n          arrange(-numflights) |&gt; head(10) |&gt; select(origin, dest)\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\ninbound_alluvial &lt;- inbound |&gt; drop_na() |&gt; \n  filter(origin %in% busiest_routes$origin & carrier %in% popular_airlines) |&gt; \n    mutate(delay_fct = sapply(arr_delay, categorize_delay),\n           flight_type = \"Inbound\") |&gt; \n      group_by(origin, dest, carrier, delay_fct, flight_type) |&gt; \n        summarise(n = n())\n\n\n`summarise()` has grouped output by 'origin', 'dest', 'carrier', 'delay_fct'.\nYou can override using the `.groups` argument.\n\n\nCode\noutbound_alluvial &lt;- outbound |&gt; drop_na() |&gt; \n  filter(dest %in% busiest_routes$origin & carrier %in% popular_airlines) |&gt; \n    mutate(delay_fct = sapply(dep_delay, categorize_delay),\n           flight_type = \"Outbound\") |&gt; \n      group_by(origin, dest, carrier, delay_fct, flight_type) |&gt; \n        summarise(n = n())\n\n\n`summarise()` has grouped output by 'origin', 'dest', 'carrier', 'delay_fct'.\nYou can override using the `.groups` argument.\n\n\nCode\nalluvial &lt;- rbind(inbound_alluvial, outbound_alluvial)\n\nalluvial$delay_fct &lt;- \n  factor(alluvial$delay_fct, \n         levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\nalluvial |&gt; drop_na() |&gt; \n  ggplot(aes(y = n/1000, axis1 = factor(origin), \n             axis2 = factor(carrier), axis3 = factor(dest))) +\n  geom_alluvium(aes(fill = delay_fct), width = 1/12) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  facet_wrap(~flight_type) +\n  scale_x_discrete(limits = c(\"Origin\", \"Carrier\", \"Destination\"),\n                   expand = c(.05, .05))+\n  scale_fill_manual(values = colors, name = \"delay ranges\") +\n  labs(\n      title = \"On-time performance for the top 10 busiest routes from NYC (2023)\",\n      subtitle = \"with popular airlines\",\n      y = \"Number of flights (in thousands)\") +\n  theme(panel.spacing = unit(1, \"lines\"))\n\n\n\n\n\n\n\n\n\n\nThe majority of flights fall in the green zone (≤15 minutes delay), indicating good on-time performance for most routes. Delays above 30 minutes (orange and red links) are relatively rare but are visible, especially for specific carriers and routes.\nAtlanta (ATL) is a major destination and origin for NYC flights, with a significant number of flights represented by thicker flows in the diagram. Other popular routes include Boston (BOS), Chicago (ORD), and Los Angeles (LAX).\nEWR (Newark), JFK (John F. Kennedy), and LGA (LaGuardia) handle similar amount of air traffic in terms of the busiest domestic routes.\nJFK appears to handle a larger proportion of long-haul domestic flights (e.g., LAX), while LGA has more regional routes (e.g., BOS, MCO).\nBoth inbound and outbound flight have similar patterns, suggesting balanced traffic for NYC’s busiest routes. Routes involving LAX and SFO show slightly more yellow, orange, and red links, indicating that these long-distance routes experience higher delays. Shorter routes like LGA to BOS or MIA show predominantly green links, suggesting better punctuality.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Your estimation: \n\n    Give your estimate of the delay \n    less than equal to 15\n    15-30\n    30-45\n    45-60\n    more than 60\n\n\n\n\n\n\n\n\n\n\n\nAfter going through the analysis, the reader would have got some idea about the patterns in delays and the factors affecting them. This interactive plot aims to quiz the user on their understanding by estimating the range of the arrival delay of a flight given four parameters:\n\norigin: the FAA code for the origin airport.\ndest: the FAA code for the destination airport.\ndep_delay: the range in which the departure delay belongs to.\nvisib: the visibility at the hour of arrival where 0 is worst visibility and 10 is best visibility.\ncarrier: the carrier operating the flight.\n\nThere are many other factors associated with estimating the arrival delay and it is complicated for a human to process all those factors and provide their estimate. Hence, the five simple factors (yet important) are provided to the reader and they can selectthe range of the arr_delay from the drop down. The actual arr_delay is only made visible when the reader provides their estimate. If the user wishes to estimate the outcome of another flight, then can use the tryAnotherBtn to load a fresh random instance.\nWe chose to make the plot since most of hourly or yearly or monthly patterns can be shown in the form of faceted time series plots and hence quizzing the reader was one of best ways to make the reader interact with aviation data.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive graph</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "The data used for the analysis caters particularly to the on-time performance of inbound and outbound domestic flights from the NYC airports (LGA, JFK, EWR). From the exploration, there were six main takeaways as follows:\n\nMost domestic flights either arrive early or on-time. The flights that get delayed are mostly those which departed late from the origin airport. There are many real-time factors that contribute to the delay (many of which are beyond the scope of this data set).\nWeather factors such as visibility and wind_speed do contribute to the arrival delay. However, the occurrence of such instances is uncommon and the duration is mostly short-lived resulting in a lower magnitude of correlation.\nThere is relatively smoother domestic air traffic at LGA since it only caters to domestic flights (except for flights from Canada). On the other hand, JFK and EWR handle a larger proportion of long-haul domestic flights. This is mainly because JFK and EWR are large international airports and operating many of the long-haul flights helps carriers in wide-body aircraft rotation for international routes.\nIt is observed that the inbound and outbound flights to and from airports in the West coast have a higher average delay compared to that of the airports in the East Coast.\nCarriers more commonly overcome departure delays in the 15-30min and 30-45min range compared to that of &gt;60min delay range probably because they keep small buffers in airline schedules to accommodate small delays.\nMajority of the air traffic from the NYC airports is concentrated between 6am and 8pm. Moreover, it is observed that the scheduled air-traffic for each of the three airports is almost identical for the four quarters.\n\nThis study limits on the on-time performance and meteorological data for analyzing the factors affecting and patterns in flight delays. However, there are many other reasons for flight delays which include equipment maintenance, airport operations, passenger demographics, and passenger connections. However, some of data like the passenger demographics and passenger connections cannot be open-sourced due to privacy issues while the remaining data may be propriety for the carriers and governments.\nThis project helped us understand that working with real-world aviation data is complicated because it has multiple components associated with it such as geo-spatial, time-series patterns, correlation patterns, etc. More importantly, the domestic flights data for only three airports was very huge and extracting patterns from it is tedious. Overall, this project helped us learn data manipulation (dplyr) and visualization (ggplot2 and ggalluvial) in R.\nWe appreciate the open-source project, anyflights, to provide real-world aviation data in a clean and structured format!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  }
]