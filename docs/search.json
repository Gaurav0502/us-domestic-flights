[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of NYC domestic flights in 2023",
    "section": "",
    "text": "1 Introduction\nAir travel has become a cornerstone of modern transportation, facilitating the movement of millions of passengers and goods daily across the globe. With this surge in air traffic, an immense volume of data is generated, offering valuable insights into various aspects of aviation performance. One critical metric is the on-time performance of flights, which measures how frequently flights adhere to their scheduled departure and arrival times. Flight delays, caused by factors such as weather, air traffic congestion, or operational inefficiencies, have far-reaching consequences, including increased costs for airlines, reduced customer satisfaction, and logistical challenges. Understanding and improving on-time performance is vital for enhancing passenger experience, optimizing airline operations, and ensuring the overall reliability of air travel.\nThis project delves into the on-time performance of domestic flights serving the New York City (NYC) region in 2023. Through detailed analysis, it explores the reasons behind delays and identifies patterns in their occurrence. Time-series analysis tracks delays over time, uncovering patterns such as peak-hour congestion, seasonal disruptions, or anomalies during specific events. This helps in identifying trends and improving future planning. Meanwhile, geospatial analysis maps delay patterns across locations, highlighting issues like weather-prone regions or congestion at specific airports. By combining these approaches, this project provides a comprehensive understanding of delays, enabling targeted solutions to improve air travel efficiency.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThe data used throughout this project deals with on-time performance of domestic flights within the United States. In the recent years, the air traffic has increased significantly and huge amounts of flight data is being generated each day. Hence, the data is filtered based on the following criteria:\nThe data is obtained using the anyflights package from CRAN. This package queries the data released annually by the Federal Aviation Administration (FAA). The data for a particular year is released in the first quarter of the following year. The FAA database is updated every year and consequently the data can be queried from any historical data up to the most recent year. The data is obtained as five different data frames as follows:\nAll the data frames are related to each other. Hence, the data has a relational structure. Every row in each of the data frames can be identified by a primary key (PK) and the flights data frame can related to each of the other four data frames with the help of foreign keys (FK). Figure 1 shows the relational schema of the data. For example, every entry in the flights data frame can be uniquely identified by (year, month, day, hour, and flight) and it can be joined with the weather data frame based on (origin, year, month, day, and hour)\nThe data used is not readily available online as CSV files. Hence, the data needs to be collected, filtered, consolidated, and saved for future use.\nThe next section describes the data preparation process.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "The airports of interest are those serving the New York City (NYC) region (i.e. LGA, JFK, and EWR).\nBoth in-bound and out-bound domestic flights.\nthe data is restricted to the most recent year (i.e. 2023).\n\n\n\nflights: it provides all the daily flight on-time performance data. It includes the origin airport, scheduled departure time, destination airport, scheduled arrival time, carrier, tail number of the aircraft, arrival delay, and departure delay. It has 863228 rows and 19 columns.\nweather: it provides hourly weather parameters for origin airport. These parameters include visibility, wind speed, pressure, precipitation, and humidity. It has 976340 rows and 15 columns.\nplanes: it provides the production information of an aircraft. It includes the tail number of the aircraft, year of manufacture, manufacturer, and the type of engine. It has 4848 rows and 10 columns.\nairports: it provides the metadata for the airport. The metadata includes the FAA code, its name, time zone, latitude, longitude, and altitude. It has 1251 rows and 8 columns.\nairlines: it provides the metadata for the airlines which is the IATA code of the carrier and its name. It has 14 rows and 2 columns.\n\n\n\n\n\nFig. 1: The relational schema for the data obtained using the anyflights package in R where PK = Primary Key, FK = Foreign Key, … = more columns exist.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-collection",
    "href": "data.html#data-collection",
    "title": "2  Data",
    "section": "2.2 Data collection",
    "text": "2.2 Data collection\nThe data collection includes two key steps:\n\nCollection of data for out-bound flights from airports that serve NYC region.\nCollection of data for in-bound flights from airports that serve NYC region.\n\nTo use the anyflights package it first needs to be installed using install.packages(\"anyflights\") .\n\n\nCode\nlibrary(anyflights)\nlibrary(dplyr)\n\n\nThe anyflights package has a anyflights() function which queries the FAA database. It fetches all the five aforementioned data frames and therefore it can take a lot of time to obtain the data contingent upon the network connectivity. In order to avoid chances of an API timeout, the default value of 60 seconds is updated with a high value of 1500 seconds stored in the API_REQ_TIMEOUT. All the previously stated constraints are stored in the STATIONS and YEAR constants. save_data() is a utility function to save the collected data into the required directory location.\n\n\nCode\n# constants\nAPI_REQ_TIMEOUT = 1500\nSTATIONS = c(\"LGA\", \"JFK\", \"EWR\")\nYEAR = 2023\nDATA_DIR = \"data\"\n\n# Utility function\nsave_data &lt;- function(data, flight_type){\n \n  tables &lt;- c(\"flights\", \"planes\", \"airlines\", \"airports\", \"weather\")\n  csv_path &lt;- \"\"\n  \n  for(table_name in tables){\n     \n    if(!any(table_name %in% c(\"airlines\", \"airports\"))){\n      \n      csv_path = file.path(DATA_DIR, \"raw\", flight_type, \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }else{\n      csv_path = file.path(DATA_DIR, \"raw\", \n                           paste(table_name, \"csv\",\n                                 sep = \".\"))\n    }\n    \n    if(!file.exists(csv_path)){\n      \n      write.csv(x = data[table_name],\n              file = csv_path)\n      \n      cat(\"Saved\", paste(table_name, \"csv\",\n                         sep = \".\"), \"at\",\n          csv_path, \"\\n\")\n       \n    }\n    \n  }\n\n}\n\n\n\n2.2.1 Outbound flights\nFor this use-case, an outbound flight is one that departs from one of airports that serve the NYC region and arrives at any other airport within the United States. Therefore, the departure airports denoted by the station argument is given the NYC airports and the year as 2023.\n\n\nCode\noptions(timeout = API_REQ_TIMEOUT)\n\nnycflights23outbound &lt;- anyflights::anyflights(station = STATIONS,\n                                               year = YEAR)\n\nsave_data(data = nycflights23outbound,\n          flight_type = \"outbound\")\n\n\n\n\n2.2.2 Inbound flights\nFor this use-case, an inbound flight is one that departs from any other airport within the United States (except the airports that serve the NYC region) and arrives at one of airports that serve the NYC region.\nThe departure airports are computed based on the distinct destination airports in flights data frame of nycflights23outbound . It happens to be that there are some airports for which the data cannot be fetched. Hence, the destination airports are filtered based on whether their FAA code appears in the faa column of airports data frame.\nAll the outbound flights are obtained for the computed list of airports. However, the flights data frame of nycflights23inbound consists of flights that depart and arrive at any airport within the United States. Therefore, all flights that do not arrive in the airports that serve NYC are filtered out based on the dest column of flights data frame.\n\n\nCode\nall_airports &lt;- nycflights23outbound$airports$faa\n\ndest_airports &lt;- nycflights23outbound$flights |&gt;\n                     filter(dest %in% all_airports & !dest %in% STATIONS) |&gt;\n                        select(\"dest\") |&gt;\n                           unique()\n\ndest_airports &lt;- dest_airports$dest\n\nnycflights23inbound &lt;- anyflights::anyflights(station = dest_airports,\n                                               year = YEAR)\n\nnycflights23inbound$flights &lt;- nycflights23inbound$flights |&gt;\n                                   filter(dest %in% STATIONS)\n\nsave_data(data = nycflights23inbound,\n          flight_type = \"inbound\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#data-consolidation",
    "href": "data.html#data-consolidation",
    "title": "2  Data",
    "section": "2.3 Data consolidation",
    "text": "2.3 Data consolidation\nIn the previous section, the data is collected into two different list: nycflights23inbound and nycflights23outbound . Each of these lists contain five data frames: flights, weather, planes, airports, and airlines. The airports and airlines data frames remain the same for inbound and outbound flights. The data for the flights, weather, and planes must be combined respectively.\n\n2.3.1 Flights data\nAll the rows in the inbound and outbound flights data frames are combined into a single data frame using rbind() powered by the dplyr package. The combined flights data is sorted based on the primary key of the flights table.\n\n\nCode\nnycflights23 &lt;- rbind(nycflights23inbound$flights,\n                      nycflights23outbound$flights)\n\nnycflights23 &lt;- nycflights23 |&gt;\n                  arrange(year, month, day, hour, flight)\n\nwrite.csv(x = nycflights23,\n          file = \"data/raw/flights.csv\")\n\n\n\n\n2.3.2 Weather\nThe weather data frame consists of the hourly weather parameters of the airport. The inbound and outbound weather data frames contain data for different set of airports. Therefore, both of them need to be joined in a similar way as that of flights data.\n\n\nCode\nweather &lt;- rbind(nycflights23inbound$weather,\n                 nycflights23outbound$weather)\n\nweather &lt;- weather |&gt;\n             arrange(origin, year, month, day, hour)\n\nwrite.csv(x = weather,\n          file = \"data/raw/weather.csv\")\n\n\n\n\n2.3.3 Planes\nThe planes data frame stored the production details for each aircraft based on its tailnum. Generally, the plane that operates the inbound flight also operates the outbound flight. However, since the NYC airports are hubs for a majority of US carriers, there is a possibility that an aircraft is changed for the onward flight.\nTherefore, all the planes operating the inbound flights is considered and all planes for outbound flights that are not in set of planes that operated in the inbound flights are considered. At the end, the data is consolidate to get production details of all the aircraft operating on the routes in the flights data frame.\n\n\nCode\ntailnum &lt;- unique(nycflights23$tailnum)\n\nplanes_inbound &lt;-\n  planes_inbound |&gt;\n    filter(planes_inbound$planes.tailnum %in% tailnum)\n\nplanes_outbound &lt;-\n   planes_outbound |&gt;\n     filter(!planes_outbound$planes.tailnum %in% planes_inbound$planes.tailnum)\n\nplanes &lt;- rbind(planes_inbound, planes_outbound)\n\nwrite.csv(x = planes,\n          file = \"data/raw/planes.csv\")\n\n\nFinally, all the data is stored in /data directory under the /raw sub-directory since no data cleaning has been performed on it yet. The /raw sub-directory contains the .csv files for consolidated data and has two further sub-directories /inbound and /outbound with the respective .csv files.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.4 Missing value analysis",
    "text": "2.4 Missing value analysis\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(DataExplorer)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(purrr)\n\n\n\n\nCode\nairlines_data &lt;- read.csv(\"data/raw/airlines.csv\") |&gt; \n                                subset(select = -c(X))\n# head(airlines_data)\n\nairports_data &lt;- read.csv(\"data/raw/airports.csv\") |&gt; \n                                subset(select = -c(X))\n# head(airports_data)\n\nflights_data &lt;- read.csv(\"data/raw/flights.csv\") |&gt;\n                                subset(select = -c(X))\n# head(flights_data)\n\nplanes_data &lt;- read.csv(\"data/raw/planes.csv\") |&gt; \n                                subset(select = -c(X, X.1))\n# head(planes_data)\n\nweather_data &lt;- read.csv(\"data/raw/weather.csv\") |&gt; \n                                subset(select = -c(X))\n# head(weather_data)\n\n\n\n\nCode\n# missing values in airline data\nairlines_data |&gt; plot_missing(title = \"Missing Values in Airlines Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in airports data\nairports_data |&gt; plot_missing(title = \"Missing Values in Airports Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in flights data\nflights_data |&gt; plot_missing(title = \"Missing Values in Flights Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in planes data\nplanes_data |&gt; plot_missing(title = \"Missing Values in Planes Data\")\n\n\n\n\n\n\n\n\n\nCode\n# missing values in weather data\nweather_data |&gt; plot_missing(title = \"Missing Values in Weather Data\")\n\n\n\n\n\n\n\n\n\nObservation:\n\nThe airlines_data stores the airline code and name. Hence, it does not have any null values\nThe airports_data has 9.51% missing values in airports.tzone column. However, it can be derived from the airports.tz column\nFlights_data has null values for actual time of departure and arrival. However, there are no null values in the scheduled time of departure and arrival. This implies that it highly probable that the flights with these null values were cancelled or rescheduled. Hence, there are null values for tail number, arrival delay, and departure delay.\nIn the planes_data, the year column has null values which do not have any significance behind them.\nThe weather_data however has several missing values. In fact, more than 95% of the values are missing in 5 of the columns - precip, temp, deep, humid, pressure. Thus, these features may be dropped.\n\n\n\nCode\ndatasets &lt;- list(\n  airlines = airlines_data,\n  airports = airports_data,\n  flights = flights_data,\n  planes = planes_data,\n  weather = weather_data\n)\n\n# Calculate missing values for each dataset\nmissing_summary &lt;- map_dfr(datasets, ~ {\n  data.frame(\n    Dataset = deparse(substitute(.x)),\n    Total_Values = prod(dim(.x)),\n    Missing_Values = sum(is.na(.x)),\n    Proportion_Missing = sum(is.na(.x)) / prod(dim(.x))\n  )\n}, .id = \"Dataset\")\n\n# Plot comparison of missing values\nggplot(missing_summary, aes(x = Dataset, y = Proportion_Missing, fill = Dataset)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = scales::percent(Proportion_Missing, accuracy = 0.1)), \n            vjust = -0.5, \n            size = 4) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"Proportion of Missing Values Across Datasets\",\n    x = \"Dataset\",\n    y = \"Proportion of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nObservation:\n\nWeather_data has a high percentage of missing values (33.2%) while the rest of the data has barely any missing values.\nHowever, most of the missing values for weather_data are concentrated among 5 features.\nHence, after we remove these 5, the proportion of missing values for weather will come down drastically.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Loading the datasets\nCode\nflights &lt;- read.csv(\"data/raw/flights.csv\")\nairlines &lt;- read.csv(\"data/raw/airlines.csv\")\nairports &lt;- read.csv(\"data/raw/airports.csv\")\nweather &lt;- read.csv(\"data/raw/weather.csv\")\nplanes &lt;- read.csv(\"data/raw/planes.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#loading-the-required-modules",
    "href": "results.html#loading-the-required-modules",
    "title": "3  Results",
    "section": "3.2 Loading the required modules",
    "text": "3.2 Loading the required modules\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(forcats)\nlibrary(ggrepel)\nlibrary(ggalluvial)\nlibrary(reshape2)\n\n\n\nAttaching package: 'reshape2'\n\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\n\nCode\nlibrary(vcd)\n\n\nLoading required package: grid\n\n\nCode\nNYC_AIRPORTS = c(\"LGA\", \"JFK\", \"EWR\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#on-time-performance-analysis",
    "href": "results.html#on-time-performance-analysis",
    "title": "3  Results",
    "section": "3.3 On-time performance Analysis",
    "text": "3.3 On-time performance Analysis\nOn-time performance is defined as the percentage of flights that departed or arrived on-time. As per the rules of Federal Aviation Administration (FAA), a flight is consider to be delayed only if it arrives or departed after 15 minutes of the scheduled time. In the plots below, the on-time performance is depicted separately for a perfect on-time or early arrival or departure using green color and the on-time performance within a buffer period of 15 minutes using yellow color.\n\n3.3.1 By the airport (RQ1)\n\n\nCode\ninbound &lt;- flights |&gt; filter(!origin %in% NYC_AIRPORTS)\noutbound &lt;- flights |&gt; filter(origin %in% NYC_AIRPORTS)\n\ninbound_otp &lt;- inbound |&gt; drop_na() |&gt;\n  group_by(dest) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(arr_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(arr_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"inbound\")\n\noutbound_otp &lt;- outbound |&gt; drop_na() |&gt; \n  group_by(origin) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(dep_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(dep_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"outbound\")\n\notp &lt;- rbind(inbound_otp |&gt; rename(airport = dest), \n             outbound_otp |&gt; rename(airport = origin))\n\n\n\n\nCode\notp |&gt; select(airport, otp_increase, strict_otp, flight_type) |&gt; \n  pivot_longer(!c(airport, flight_type), \n               names_to = \"otp_type\", \n               values_to = \"otp\") |&gt;  \n  ggplot(aes(x = flight_type, y = otp, fill = otp_type)) + \n  geom_col() + facet_wrap(~airport) +\n  scale_fill_manual(values = c(\"#ffc300\", \"#32de84\"),\n                    name = \"delay criteria\", \n                    labels = c(\"&lt;= 15 minutes\", \"&lt;= 0 minutes\")) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"On-time performance for the airports serving NYC (2023)\",\n    x = \"Type of Flight\",\n    y = \"On-time performance (in %)\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe inbound and outbound flights at JFK and LGA had almost the same on-time performance.\nHowever, at EWR, the inbound flights had slightly better on-time performance than outbound flights.\n\n\n\n3.3.2 By the airline (RQ2)\n\n\nCode\ninbound &lt;- flights |&gt; filter(!origin %in% NYC_AIRPORTS)\noutbound &lt;- flights |&gt; filter(origin %in% NYC_AIRPORTS)\n\ninbound_otp &lt;- inbound |&gt; drop_na() |&gt; \n  group_by(dest, carrier) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(arr_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(arr_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"inbound\")\n\n\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\nCode\noutbound_otp &lt;- outbound |&gt; drop_na() |&gt; \n  group_by(origin, carrier) |&gt; \n      summarise(total_flights = n(),\n                strictly_on_time = sum(dep_delay &lt;= 0),\n                strict_otp = strictly_on_time/total_flights,\n                on_time = sum(dep_delay &lt;= 15),\n                otp_increase = on_time/total_flights - strict_otp,\n                flight_type = \"outbound\")\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\notp &lt;- rbind(inbound_otp |&gt; rename(airport = dest), \n             outbound_otp |&gt; rename(airport = origin))\n\n\n\n\nCode\notp |&gt; select(carrier, airport, otp_increase, strict_otp, flight_type) |&gt; \n  pivot_longer(!c(carrier, airport, flight_type), \n               names_to = \"otp_type\", values_to = \"otp\") |&gt;  \n  ggplot(aes(x = carrier, y = otp, fill = otp_type)) + \n  geom_col() + facet_grid(flight_type ~ airport,\n                          scales=\"free\",\n                          space = \"free\") +\n  scale_fill_manual(values = c(\"#ffc300\", \"#32de84\"),\n                    name = \"delay criteria\", \n                    labels = c(\"&lt;= 15 minutes\", \n                               \"&lt;= 0 minutes\")) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    title = \"On-time performance for the airlines serving NYC region (2023)\",\n    x = \"Airline Code\",\n    y = \"On-time performance (in %)\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe pattern in the on-time performance of inbound and outbound flights is similar in most cases.\nAllegiant Air (G4) had the best on-time performance at EWR (also among all the three airports). However, it had the least market share implying that it operated fewer domestic flights but had a very good on-time performance for them.\nUnited Airlines (UA) and Republic Airlines (YX) have a large market share at EWR and also have a commendable on-time performance for that operational scale.\nJetBlue (B6) has the highest market share at JFK but has a relatively weaker on-time performance especially for outbound flights.\nHawaiian Airlines (HA) operates very few domestic flights to JFK but had a very weak on-time performance. Moreover, it turns out that many of their flights arrived within the 15 minute buffer period.\nFrontier Airlines (F9) had the worst on-time performance for outbound flights among all airlines.\n\n\n\nCode\nairlines &lt;- c(\"DL\", \"AA\", \"UA\", \"WN\", \"B6\", \"YX\", \"9E\")\ninbound$carrier &lt;- ifelse(inbound$carrier %in% airlines, \n                                    inbound$carrier, \"Other\")\n\noutbound$carrier &lt;- ifelse(outbound$carrier %in% airlines, \n                                   outbound$carrier, \"Other\")\n\ninbound_mkt &lt;- inbound |&gt; select(carrier, dest) |&gt; \n  group_by(dest, carrier) |&gt;\n     summarise(num_flights = n())\n\n\n`summarise()` has grouped output by 'dest'. You can override using the\n`.groups` argument.\n\n\nCode\noutbound_mkt &lt;- outbound |&gt; select(carrier, origin) |&gt; \n  group_by(origin, carrier) |&gt;\n     summarise(num_flights = n())\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\nairport_mkt_share &lt;- \n  inner_join(rename(inbound_mkt, airport = dest), \n                    rename(outbound_mkt, airport = origin), \n                    by = c(\"carrier\", \"airport\")) |&gt; \n                      mutate(total_flights = num_flights.x + num_flights.y,\n                             mkt_share = total_flights/sum(total_flights)*100.0,\n                             mkt_share = round(mkt_share))\n\n\n\n\nCode\nfill_color = c(\"DL\" = \"#EE7663\", \"AA\" = \"#A0BEF5\", \"WN\" = \"lightgreen\",\n               \"UA\" = \"cornflowerblue\", \"B6\" = \"gold\", \"Other\" = \"#91AFB3\",\n               \"YX\" = \"#85decb\", \"9E\" = \"#d959c6\")\n\nairport_mkt_share |&gt; ggplot(aes(x = airport, \n                            y = mkt_share/100, fill = fct_reorder(carrier, \n                                                                  mkt_share))) +\n                     geom_col(position = \"stack\", width = 0.3) +\n                     geom_text(aes(label = mkt_share), \n                               position = position_stack(vjust = .5),\n                               size = 3.5) +\n                     scale_fill_manual(values = fill_color,\n                                       name = \"carrier\") +\n                     scale_y_continuous(labels = scales::percent) +\n                     labs(title = \"Marketshare of Carrier by Airport (2023)\", \n                          x = \"Airport\", \n                          y = \"Market Share (in %)\") + \n                     coord_flip() +\n                     theme_minimal()\n\n\n\n\n\n\n\n\n\n\nThe domestic market share at LGA was dominated by Delta Airlines (DL) and American Airlines (AA). This is because Endeavor Airlines (9E) is a subsidiary of Delta Airlines and Republic Airlines (YX) operates under contract for Delta, American, and United.\nThe domestic market share at JFK was dominated by JetBlue Airlines (B6) and Delta Airlines (DL).\nUnited Airlines (UA) dominated more than half of the domestic market share at EWR.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#analysis-of-delayed-flights",
    "href": "results.html#analysis-of-delayed-flights",
    "title": "3  Results",
    "section": "3.4 Analysis of Delayed flights",
    "text": "3.4 Analysis of Delayed flights\n\n3.4.1 Distribution of delayed flights (RQ3)\nThe delay is generally categorized into seven categories: less than 10 minutes, 10-20 minutes, 20-40 minutes, 40-60 minutes, and more than 60 minutes. However, as a part of the on-time performance analysis, the delay &lt;= 15 minutes considered to be on-time. Therefore, we use four categories: 15-30 minutes, 30-45 minutes, 45-60 minutes, and more than 60 minutes.\n\n\nCode\ncategorize_delay &lt;- function(x) {\n  if (x &lt;= 15) {\n    return(\"&lt;=15\")\n  } else if (x &gt; 15 & x &lt;= 30) {\n    return(\"15-30\")\n  } else if (x &gt; 30 & x &lt;= 45) {\n    return(\"30-45\")\n  } else if (x &gt; 45 & x &lt;= 60) {\n    return(\"45-60\")\n  } else {\n    return(\"&gt;60\")\n  }\n}\n\ninbound &lt;- inbound |&gt; drop_na() |&gt; \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n                                arr_delay_fct = sapply(arr_delay, \n                                                       categorize_delay),\n                                flight_type = \"inbound\")\n\noutbound &lt;- outbound |&gt; drop_na() |&gt;  \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n                                arr_delay_fct = sapply(arr_delay, \n                                                       categorize_delay),\n                                flight_type = \"outbound\")\n\nnycflights &lt;- rbind(inbound |&gt; \n                      select(dest, arr_delay_fct, flight_type) |&gt; \n                        rename(airport = dest, delay_fct = arr_delay_fct),\n                    outbound |&gt; \n                      select(origin, dep_delay_fct, flight_type) |&gt; \n                        rename(airport = origin, delay_fct = dep_delay_fct))\n\nnycflights$delay_fct &lt;- factor(nycflights$delay_fct, \n                               levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                          \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\nfill_color = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\")\n\nnycflights |&gt; filter(delay_fct != \"&lt;=15\") |&gt; \n  group_by(airport, flight_type, delay_fct) |&gt; summarise(count = n()) |&gt; \n    mutate(percentage = round(count/sum(count)*100, 2)) |&gt;\n      ggplot(aes(x = flight_type, y = percentage, fill = fct_rev(delay_fct))) + \n      geom_col(position = \"stack\") + facet_wrap(~airport) +\n      scale_fill_manual(values = fill_color, name = \"delay ranges\") +\n      geom_text(aes(label = percentage),\n                position = position_stack(vjust = .5),\n                size = 3.5) +\n      labs(\n        title = \"On-time performance for the airports serving NYC (2023)\",\n        x = \"Type of Flight\",\n        y = \"On-time performance (in %)\"\n      )\n\n\n`summarise()` has grouped output by 'airport', 'flight_type'. You can override\nusing the `.groups` argument.\n\n\n\n\n\n\n\n\n\n\nAcross all airports (EWR, JFK, LGA), around 40% of flights experience delays exceeding 60 minutes, indicating significant on-time performance challenges.\nEWR has slightly better performance in shorter delay categories (15–30 minutes), while JFK has the highest proportion of long delays (&gt;60 minutes).\nDelay patterns are nearly identical for inbound and outbound flights, suggesting systemic issues rather than route-specific challenges.\n\n\n\n3.4.2 Cascading effects of departure delays (RQ4)\n\n\nCode\nnycflights &lt;- rbind(inbound, outbound)\n\nnycflights$dep_delay_fct &lt;- factor(nycflights$dep_delay_fct, \n                               levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                          \"45-60\", \"&gt;60\"))\n\nnycflights$arr_delay_fct &lt;- factor(nycflights$arr_delay_fct, \n                               levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                          \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\nfill_color = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\", \"&lt;=15\" = \"green3\")\n\ndf &lt;- nycflights |&gt; filter(!dep_delay_fct == \"&lt;=15\" & !arr_delay_fct == \"&lt;15\") |&gt;\n  group_by(dep_delay_fct, arr_delay_fct) |&gt;\n   summarise(n = n())\n\ndf |&gt; drop_na() |&gt; \n  ggplot(aes(y = n/1000, axis1 = dep_delay_fct, axis2 = arr_delay_fct)) +\n  geom_alluvium(aes(fill = arr_delay_fct)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  scale_x_discrete(limits = c(\"Departure Delay\", \"Arrival Delay\"),\n                   expand = c(.05, .05)) +\n  scale_y_continuous() +\n  scale_fill_manual(values = fill_color, name = \"delay ranges\") +\n      labs(\n        title = \"Cascading effect of departure delay (2023)\",\n        x = \"Type of delay\",\n        y = \"Number of flights (in thousands)\"\n      )\n\n\n\n\n\n\n\n\n\n\nA significant number of flights with 15–30 departure delays arrive with &lt;= 15 minutes arrival delays, thus showing effective delay recovery mechanisms for short delays, likely due to buffer times in schedules or improved flight management during transit.\nFor flights in the 30–60 minutes departure delay range, most flights either maintain or reduce the subsequent delay in arrival, once again showing an effective delay recovery mechanism.\nFlights with departure delays exceeding 60 minutes overwhelmingly result in arrival delays within the same category (&gt;60). This emphasizes the difficulty in recovering schedules once delays surpass the 1-hour mark.\n\n\n\n3.4.3 Factors affecting the delays (RQ5)\n\n3.4.3.1 Correlation (RQ5)\n\n\nCode\nflights_planes &lt;- inner_join(flights, \n                             planes |&gt; rename(tailnum = planes.tailnum), \n                             by = c(\"tailnum\"))\n\nflights_planes &lt;- flights_planes |&gt; \n  rename(dep_hour = hour) |&gt; \n  mutate(arr_hour = sched_arr_time%/%100, \n         plane_age = 2024 - planes.year)\n\nflights_planes_weather &lt;- inner_join(flights_planes |&gt; rename(hour = arr_hour),\n                                     weather |&gt; rename(dest = origin), \n                                     by = c(\"dest\", \"month\", \"day\", \"hour\"))\n\ndf &lt;- flights_planes_weather |&gt; select(arr_delay, dep_delay, hour, air_time,\n                                       wind_speed, visib, plane_age)\n\ncorr_mat &lt;- round(cor(df |&gt; drop_na()), 2)\n\nmelt(corr_mat) |&gt; \n  ggplot(aes(x = Var1, y = Var2, fill=value)) + \n  geom_tile() + geom_text(aes(label = value), color = \"white\", size = 4) +\n  labs(\n    title = \"Factors affecting the arrival delay (2023)\",\n    x = \"Factors affecting delays\",\n    y = \"Factors affecting delays\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe most actionable metric for predicting or managing arrival delays is departure delay, as their correlation is very high.\nThere is a small positive correlation between hour (time of day) and arrival delay. Certain times of the day might see slightly more delays. However, this can be impacted by the fact that the overall frequency of flights differs during different times of the day.\nWind speed and arrival delay show a weak positive correlation (0.07), possibly indicating that stronger winds marginally impact delays.\nVisibility has a slight negative correlation which implies that lower the visibility, higher the delay.\nVariables like plane age and air time have nearly no meaningful correlation with arrival delay.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#air-traffic-rq6",
    "href": "results.html#air-traffic-rq6",
    "title": "3  Results",
    "section": "3.5 Air Traffic (RQ6)",
    "text": "3.5 Air Traffic (RQ6)\n\n\nCode\nmonth2quarter &lt;- function(month) {\n  if (month %in% c(1, 2, 3)) {\n    return(\"Q1\")\n  } else if (month %in% c(4, 5, 6)) {\n    return(\"Q2\")\n  } else if (month %in% c(7, 8, 9)) {\n    return(\"Q3\")\n  } else {\n    return(\"Q4\")\n  }\n}\n\ninbound_ &lt;- inbound |&gt; drop_na() |&gt; \n  rename(sched_dep_hour = hour) |&gt; \n    mutate(sched_arr_hour = sched_arr_time%/%100,\n           arr_hour = arr_time%/%100,\n           dep_hour = dep_time%/%100,\n           qtr = sapply(month, month2quarter))\noutbound_ &lt;- outbound |&gt; drop_na() |&gt; \n  rename(sched_dep_hour = hour) |&gt; \n    mutate(sched_arr_hour = sched_arr_time%/%100,\n           arr_hour = arr_time%/%100,\n           dep_hour = dep_time%/%100,\n           qtr = sapply(month, month2quarter))\n\nair_traffic_ &lt;- rbind(inbound_ |&gt; select(dest, arr_hour, sched_arr_hour, qtr) |&gt; \n                        rename(airport = dest,\n                               hour = arr_hour,\n                               sched_hour = sched_arr_hour),\n                      outbound_ |&gt; select(origin, dep_hour, \n                                          sched_dep_hour, qtr) |&gt; \n                        rename(airport = origin,\n                               hour = dep_hour,\n                               sched_hour = sched_dep_hour))\n\nsched_air_traffic &lt;- air_traffic_ |&gt; \n  group_by(airport, sched_hour, qtr) |&gt;\n    summarise(scheduled = n())\n\n\n`summarise()` has grouped output by 'airport', 'sched_hour'. You can override\nusing the `.groups` argument.\n\n\nCode\nair_traffic &lt;- air_traffic_ |&gt; \n  group_by(airport, hour, qtr) |&gt; \n    summarise(actual = n())\n\n\n`summarise()` has grouped output by 'airport', 'hour'. You can override using\nthe `.groups` argument.\n\n\nCode\nair_traffic$hour &lt;- factor(air_traffic$hour, \n                           levels = c(0:24))\nsched_air_traffic$sched_hour &lt;- factor(sched_air_traffic$sched_hour, \n                                       levels = c(0:24))\n\nair_traffic &lt;- \n  left_join(air_traffic, sched_air_traffic |&gt; \n              rename(hour = sched_hour),\n            by = c(\"airport\", \"hour\", \"qtr\"))\n\nair_traffic[is.na(air_traffic)] &lt;- 0\n\n\n\n\nCode\nair_traffic |&gt; pivot_longer(!c(\"airport\", \"hour\", \"qtr\"), \n                            values_to = \"numflights\", names_to = \"type\") |&gt; \n  ggplot(aes(x = hour, y = numflights, color = type, group = type)) +\n   geom_line() + facet_grid(qtr~airport, scales=\"free_x\", space = \"free_x\") + \n   scale_x_discrete(breaks = c(0, 4, 8, 12, 16, 20, 24)) +\n   scale_color_manual(values = c(\"scheduled\" = \"tomato\", \"actual\" = \"darkblue\"), \n                      name = \"Type of air traffic\") +\n   labs(\n      title = \"Scheduled Air Traffic v/s Actual Air Traffic (2023)\", \n      subtitle = \"over the four quarters\",\n      x = \"Hour of the day\",\n      y = \"Number of flights\") +\n   theme_gray(16) +\n   theme(legend.position=\"bottom\",\n         strip.text.y = element_text(angle = 0))\n\n\n\n\n\n\n\n\n\n\nThe frequency of flights is highest between hours 6 to 20 and is low at other times. For all 3 airports, the scheduled and actual number of flights are pretty close to each other, with major overlap, indicating efficient on-time performance consistently.\nOver the 4 quarters, we observe similar patterns in flight frequency for a particular airport. This tells us that each airport maintains its same schedule throughout the 4 quarters. Of course, the schedule is different for different airports.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#monthly-trends-in-delays-rq7",
    "href": "results.html#monthly-trends-in-delays-rq7",
    "title": "3  Results",
    "section": "3.6 Monthly trends in delays (RQ7)",
    "text": "3.6 Monthly trends in delays (RQ7)\n\n\nCode\ninbound &lt;- inbound |&gt; drop_na() |&gt; \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n                                arr_delay_fct = sapply(arr_delay, \n                                                       categorize_delay),\n                                flight_type = \"inbound\")\n\noutbound &lt;- outbound |&gt; drop_na() |&gt;  \n  mutate(dep_delay_fct = sapply(dep_delay, categorize_delay),\n                                arr_delay_fct = sapply(arr_delay, \n                                                       categorize_delay),\n                                flight_type = \"outbound\")\n\nnycflights &lt;- rbind(inbound |&gt; \n                      select(dest, arr_delay_fct, flight_type, month) |&gt; \n                        rename(airport = dest, delay_fct = arr_delay_fct),\n                    outbound |&gt; \n                      select(origin, dep_delay_fct, flight_type, month) |&gt; \n                        rename(airport = origin, delay_fct = dep_delay_fct))\n\nnycflights$delay_fct &lt;- factor(nycflights$delay_fct, \n                               levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \n                                          \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\ncolors = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \n           \"30-45\" = \"#ffa200\", \"15-30\" = \"gold\")\n\nnycflights |&gt; filter(delay_fct != \"&lt;=15\") |&gt; \n  group_by(month, delay_fct, airport) |&gt; \n  summarise(count = n()) |&gt; mutate(percentage = count/sum(count)) |&gt;\n    ggplot(aes(x = factor(month), y = percentage, \n               color = delay_fct, group = delay_fct)) + \n    geom_line() +\n    facet_wrap(.~airport, scale = \"free_x\", ncol = 1) + \n    scale_y_continuous(labels = scales::percent) +\n    scale_color_manual(values = colors, name = \"delay ranges\") +\n    scale_x_discrete(labels = month.abb) +\n    labs(\n      title = \"Percentage of delayed flights over the 12 months (2023)\",\n      x = \"Month\",\n      y = \"Percentage of delayed flights\") +\n    theme(legend.position=\"bottom\")\n\n\n`summarise()` has grouped output by 'month', 'delay_fct'. You can override\nusing the `.groups` argument.\n\n\n\n\n\n\n\n\n\n\nEWR observes a peak in delays during the Spring season followed by a dip in the Summer and Fall seasons. JFK observes a gradual increase in delays throughout the year resulting in a peak in the Fall season. LGA, on the other hand, observes a peak in delays during the Winter months, followed by a big dip in the Spring season, and then average delays in the remaining months.\nThus, each airport observes a different pattern throughout the year, there isn’t much similarity between them.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#geospatial-analysis-rq8",
    "href": "results.html#geospatial-analysis-rq8",
    "title": "3  Results",
    "section": "3.7 Geospatial Analysis (RQ8)",
    "text": "3.7 Geospatial Analysis (RQ8)\n\n\nCode\ncolors = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\", \"&lt;=15\" = \"green3\")\n\nstates = map_data(\"state\")\nairports_usa &lt;- airports |&gt; \n  filter(airports.lon &lt; 0 & airports.lat &lt; 50 & airports.lon &gt; -140)\n\ninbound_avg_delay &lt;- \n  inner_join(inbound, \n             airports_usa |&gt; rename(origin = airports.faa), \n             by = c(\"origin\")) |&gt; \n  group_by(origin, airports.lat, airports.lon) |&gt; \n  summarise(avg_arr_delay = sapply(mean(arr_delay), categorize_delay))\n\n\n`summarise()` has grouped output by 'origin', 'airports.lat'. You can override\nusing the `.groups` argument.\n\n\nCode\noutbound_avg_delay &lt;- \n  inner_join(outbound, \n             airports_usa |&gt; rename(dest = airports.faa), \n             by = c(\"dest\")) |&gt; \n  group_by(dest, airports.lat, airports.lon) |&gt; \n  summarise(avg_dep_delay = sapply(mean(dep_delay), categorize_delay))\n\n\n`summarise()` has grouped output by 'dest', 'airports.lat'. You can override\nusing the `.groups` argument.\n\n\nCode\ninbound_avg_delay$avg_arr_delay &lt;- \n  factor(inbound_avg_delay$avg_arr_delay, \n         levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \"45-60\", \"&gt;60\"))\n\ninbound_avg_delay$avg_dep_delay &lt;- \n  factor(outbound_avg_delay$avg_dep_delay, \n         levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \"45-60\", \"&gt;60\"))\n\ninbound_avg_delay &lt;- inbound_avg_delay |&gt; \n  rename(inbound = avg_arr_delay,\n         outbound = avg_dep_delay)\n\ninbound_avg_delay &lt;- inbound_avg_delay |&gt; \n  pivot_longer(!c(\"origin\", \"airports.lat\", \"airports.lon\"),\n               values_to = \"delay\",\n               names_to = \"flight_type\")\n\n\n\n\nCode\nggplot(data = states) +\n     geom_polygon(mapping=aes(x = long,y = lat,group = group),\n                              color = \"black\",fill = \"white\") +\n     geom_point(data = inbound_avg_delay,\n                mapping = aes(x = airports.lon, y = airports.lat, \n                              color = delay)) +\n     geom_text_repel(data = inbound_avg_delay |&gt; \n                              filter(delay %in% c(\"45-60\", \"&gt;60\")), \n                     mapping = aes(x = airports.lon, y = airports.lat, \n                                   label = origin), color = \"tomato\", \n                                   nudge_y = -0.6) +\n     geom_text_repel(data = inbound_avg_delay |&gt; \n                              filter(delay %in% c(\"15-30\", \"30-45\")), \n                     mapping = aes(x = airports.lon, y = airports.lat, \n                                 label = origin), color = \"black\", \n                                 nudge_y = -0.6) +\n     facet_wrap(~flight_type, ncol = 2) +\n     scale_color_manual(values = colors, name = \"delay ranges\") +\n     theme(legend.position = \"bottom\") +\n     labs(\n          title = \"Inbound (arr_delay) and Outbound (dep_delay) flight delay by airports (2023)\",\n          x = \"Longitude\",\n          y = \"Latitude\")\n\n\n\n\n\n\n\n\n\n\nWe observe that on the East Coast, most airports have a &lt;=15 minute delay range whereas on the West Coast, there are many airports that belong to higher delay ranges.\nThere are more airports in the 15-30 minute delay range in outbound as compared to inbound. However, in the high delay ranges (of greater than 30 minutes), inbound is more than outbound. Overall, there is a decent similarity between the two, with a few differences.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#delays-for-busiest-routes-rq9",
    "href": "results.html#delays-for-busiest-routes-rq9",
    "title": "3  Results",
    "section": "3.8 Delays for busiest routes (RQ9)",
    "text": "3.8 Delays for busiest routes (RQ9)\n\n\nCode\npopular_airlines = c(\"AA\", \"DL\", \"UA\", \"B6\")\n\ncolors = c(\"&gt;60\" = \"#d62828\", \"45-60\" = \"#e85d04\", \"30-45\" = \"#ffa200\",\n               \"15-30\" = \"gold\", \"&lt;=15\" = \"green3\")\n\nbusiest_routes &lt;- inbound |&gt; \n  select(origin, dest, dep_delay, arr_delay) |&gt; drop_na() |&gt; \n    group_by(origin, dest) |&gt; \n      summarise(numflights = n()) |&gt; \n          arrange(-numflights) |&gt; head(10) |&gt; select(origin, dest)\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\ninbound_alluvial &lt;- inbound |&gt; drop_na() |&gt; \n  filter(origin %in% busiest_routes$origin & carrier %in% popular_airlines) |&gt; \n    mutate(delay_fct = sapply(arr_delay, categorize_delay),\n           flight_type = \"Inbound\") |&gt; \n      group_by(origin, dest, carrier, delay_fct, flight_type) |&gt; \n        summarise(n = n())\n\n\n`summarise()` has grouped output by 'origin', 'dest', 'carrier', 'delay_fct'.\nYou can override using the `.groups` argument.\n\n\nCode\noutbound_alluvial &lt;- outbound |&gt; drop_na() |&gt; \n  filter(dest %in% busiest_routes$origin & carrier %in% popular_airlines) |&gt; \n    mutate(delay_fct = sapply(dep_delay, categorize_delay),\n           flight_type = \"Outbound\") |&gt; \n      group_by(origin, dest, carrier, delay_fct, flight_type) |&gt; \n        summarise(n = n())\n\n\n`summarise()` has grouped output by 'origin', 'dest', 'carrier', 'delay_fct'.\nYou can override using the `.groups` argument.\n\n\nCode\nalluvial &lt;- rbind(inbound_alluvial, outbound_alluvial)\n\nalluvial$delay_fct &lt;- \n  factor(alluvial$delay_fct, \n         levels = c(\"&lt;=15\", \"15-30\", \"30-45\", \"45-60\", \"&gt;60\"))\n\n\n\n\nCode\nalluvial |&gt; drop_na() |&gt; \n  ggplot(aes(y = n/1000, axis1 = factor(origin), \n             axis2 = factor(carrier), axis3 = factor(dest))) +\n  geom_alluvium(aes(fill = delay_fct), width = 1/12) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  facet_wrap(~flight_type) +\n  scale_x_discrete(limits = c(\"Origin\", \"Carrier\", \"Destination\"),\n                   expand = c(.05, .05))+\n  scale_fill_manual(values = colors, name = \"delay ranges\") +\n  labs(\n      title = \"On-time performance for the top 10 busiest routes from NYC (2023)\",\n      subtitle = \"with popular airlines\",\n      y = \"Number of flights (in thousands)\") +\n  theme(panel.spacing = unit(1, \"lines\"))\n\n\n\n\n\n\n\n\n\n\nThe majority of flights (links) fall in the green zone (≤15 minutes delay), indicating good on-time performance for most routes. Delays above 30 minutes (orange and red links) are relatively rare but are visible, especially for specific carriers and routes.\nAtlanta (ATL) is a major destination and origin for NYC flights, with a significant number of flights represented by thicker flows in the diagram. Other popular routes include Boston (BOS), Chicago (ORD), and Los Angeles (LAX).\nAA (American Airlines), B6 (JetBlue), DL (Delta Airlines), and UA (United Airlines) dominate the busiest routes. The thickness of the flows suggests that Delta (DL) and JetBlue (B6) handle a substantial number of flights compared to other carriers.\nEWR (Newark), JFK (John F. Kennedy), and LGA (LaGuardia) each show distinct patterns in terms of the routes they handle. JFK appears to handle a larger proportion of long-haul flights (e.g., LAX), while LGA has more regional routes (e.g., BOS, MCO).\nBoth panels (Inbound and Outbound) have similar patterns, suggesting balanced traffic for NYC’s busiest routes. Routes involving LAX and SFO show slightly more yellow, orange, and red links, indicating that these long-distance routes may experience higher delays. Shorter routes like LGA to BOS or MIA show predominantly green links, suggesting better punctuality for shorter flights.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Your estimation: \n\n    Give your estimate of the delay \n    less than equal to 15\n    15-30\n    30-45\n    45-60\n    more than 60",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive graph</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "The data used for the analysis caters particularly to the on-time performance of inbound and outbound domestic flights from the NYC airports (LGA, JFK, EWR). From the exploration, there were four main takeaways as follows:\n\nMost of domestic flights either arrive early or on-time. The flights that get delayed are mostly those which departed late from origin airport. There are many real-time factors that contribute to delay (many of which are beyond the scope of this data set.)\nThere is relatively smoother air traffic at LGA since it only caters to domestic flights. While, EWR and JFK, also have significant amount of international air traffic which is not available in this data.\nThe delays pertaining to the categories: 15-30 and 30-45 are overcomed by the airline.\nJetBlue has higher variability in the delays compared to the other airlines.\n\nThe study limits can further exhaustively understand the patterns in the delays by considering other sources of data that would cover passenger details, their connections, and airport operations.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  }
]